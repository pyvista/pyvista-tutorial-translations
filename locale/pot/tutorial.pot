# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, PyVista Developers
# This file is distributed under the same license as the PyVista Tutorial package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyVista Tutorial \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-22 16:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../pyvista-tutorial/doc/source/tutorial.rst:4
msgid "Lessons"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:2
msgid "PyVista Tutorial"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:20
msgid "Welcome to the PyVista Tutorial!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:22
msgid "Below you'll find the schedule for the tutorial. Each lesson is split up into a talk and an exercise section where you'll be able to practice what was demonstrated in the tutorial. These lessons are designed to be highly interactive, where each lesson page below contains a MyBinder button where you can run the notebooks in the `MyBinder <https://mybinder.org/>`_ environment. You can also download notebooks and Python scripts for your local environment."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:34
msgid "Download Notebooks"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:37
msgid "Download all of the Jupyter Notebooks for the tutorial."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:48
msgid "Questions"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:50
msgid "During the tutorial, feel free to ask questions if you don't understand something or need help getting started. We're here to help!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:54
msgid "This tutorial was originally created for SciPy 2022, but we plan on maintaining it as it's a great way to learn how to get started with PyVista. Once the recording is live, we'll be sure to add a link to the recording here for all to see."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:59
msgid "If you have any questions about PyVista after the tutorial, feel free to post your questions in |discuss| or |slack|."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial.rst:0
msgid "discuss"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial.rst:0
msgid "slack"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:64
msgid "Tutorial Schedule"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:67
msgid "**Lesson**"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:67
msgid "**Description**"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:67
msgid "**Presenter**"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:67
msgid "**Time**"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:69
msgid ":ref:`intro`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:69
msgid "Introduction - Using PyVista for 3D Visualization within Python."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:69
#: ../../pyvista-tutorial/doc/source/tutorial.rst:71
#: ../../pyvista-tutorial/doc/source/tutorial.rst:83
#: ../../pyvista-tutorial/doc/source/tutorial.rst:87
msgid "`Alex Kaszynski`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:69
#: ../../pyvista-tutorial/doc/source/tutorial.rst:71
#: ../../pyvista-tutorial/doc/source/tutorial.rst:75
#: ../../pyvista-tutorial/doc/source/tutorial.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial.rst:83
#: ../../pyvista-tutorial/doc/source/tutorial.rst:85
msgid "20 minutes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:71
msgid ":ref:`basic`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:71
msgid "Reading and plotting 3D data using the `pyvista.examples`_ module and external files."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:73
msgid ":ref:`mesh`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:73
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:12
msgid "Learn the basics of the PyVista data types and how to open common 3D file formats to visualize the data in 3D."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:73
#: ../../pyvista-tutorial/doc/source/tutorial.rst:75
#: ../../pyvista-tutorial/doc/source/tutorial.rst:77
#: ../../pyvista-tutorial/doc/source/tutorial.rst:81
msgid "`Bane Sullivan`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:73
msgid "25 minutes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:75
msgid ":ref:`figures`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:75
msgid "Demonstrate many features of the PyVista plotting API to create compelling 3D visualizations and touch on animations."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:77
msgid ":ref:`filters`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:77
msgid "Demonstrate the PyVista filters API to perform mesh analysis and alteration."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:77
#: ../../pyvista-tutorial/doc/source/tutorial.rst:79
#: ../../pyvista-tutorial/doc/source/tutorial.rst:87
msgid "15 minutes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:79
msgid ":ref:`action`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:79
msgid "Show how PyVista is already being used within several projects and can be used for all things visualization."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:79
#: ../../pyvista-tutorial/doc/source/tutorial.rst:85
msgid "`Tetsuo Koyama`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:81
msgid ":ref:`vtk`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:81
msgid "Show how PyVista uses VTK and how you can combine the best of both worlds!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:83
msgid ":ref:`sphinx`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:83
#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:12
msgid "Leverage PyVista to make some awesome interactive web documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:85
msgid ":ref:`widgets`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:85
msgid "Use PyVista with a variety of helpful widgets."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:87
msgid ":ref:`qt`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial.rst:87
msgid "Demonstrate how to use PyVista to create standalone applications using `pyinstaller`_ and the Qt framework."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_00_intro_a_basic.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:304
msgid "Create Basic Geometric Objects"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:26
msgid "This is the \"Hello, world!\" of PyVista."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:43
msgid "This runs through several of the available geometric objects available in VTK which PyVista provides simple convenience methods for generating."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:46
msgid "Let's run through creating a few geometric objects!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:72
msgid "Now let's plot them all in one window"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:118
msgid "**Total running time of the script:** ( 0 minutes  2.120 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:0
msgid "Launch binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:140
msgid ":download:`Download Python source code: a_basic.py <a_basic.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:146
msgid ":download:`Download Jupyter notebook: a_basic.ipynb <a_basic.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/a_basic.rst:153
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:325
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:311
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:177
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:233
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:316
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:442
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:242
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:294
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:199
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:236
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:477
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:391
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8193
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:388
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:592
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:366
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:222
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:213
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:431
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:193
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:310
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:127
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:173
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:160
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:135
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:604
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:603
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:223
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:215
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:279
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:286
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:148
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:158
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:172
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:391
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:618
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:220
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:347
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:342
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:555
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:288
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:251
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1426
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:486
#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:285
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:148
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:210
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:137
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:173
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:338
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:197
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:304
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:130
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:213
#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:184
msgid "`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:10
msgid "Introduction"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:12
msgid "This section includes a brief explanation of the background and history of PyVista."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:16
msgid "This section of the tutorial was adopted from `Getting Started <https://docs.pyvista.org/getting-started/index.html>`_ chapter of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:20
msgid "PyVista is one of many visulization libraries built on top `VTK - The Visualization Toolkit <https://vtk.org/>`_. It's primary intent was to be an abstraction layer over VTK to provide conviencece and functionality to VTK exposed \"Pythonically\"."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:27
msgid "Brief History"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:28
msgid "PyVista was created out of a desire to make a reusable higher level abstraction layer that \"wraps\" the lower level functionality of VTK."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:31
msgid "Originally created as a sub-libary for `femorph <https://www.wpafb.af.mil/News/Article-Display/Article/1503043/afrl-signs-first-of-its-kind-software-license-with-pratt-whitney/>`_ by `@akaszynski <https://github.com/akaszynski>`_ in 2016."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:34
msgid "First posted to GitHub as `akaszynski/vtki <https://github.com/akaszynski/vtki>`_ back in 2017."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:36
msgid "`@banesullivan <https://github.com/banesullivan/>`_ joined the project in 2018 to expand functionality, features, and improve the documentation with examples."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:38
msgid "First release of `PyVista <https://pypi.org/project/pyvista/#history>`_ on PyPI in 2019."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:40
msgid "Published a paper `Sullivan, B., & Kaszynski, A. (2019). PyVista: 3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK). Journal of Open Source Software, 4(37), 1450. https://doi.org/10.21105/joss.01450 <https://joss.theoj.org/papers/10.21105/joss.01450>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:44
msgid "Now over 100+ contributors and `~1.4k Stars <https://github.com/pyvista/pyvista/stargazers>`_ on GitHub!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:46
msgid "Greatly expanded internal presence and continuing support thanks to"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:48
msgid "`@tkoyama010 <https://github.com/tkoyama010>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:49
msgid "`@adeak <https://github.com/adeak>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:50
msgid "`@MatthewFlamm <https://github.com/MatthewFlamm>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:52
msgid "|PyPIact| |condaact| |contributors| |stars|"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "PyPIact"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "condaact"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "contributors"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "GitHub"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:72
msgid "Who is PyVista for?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:74
msgid "Anyone who wants to visualize 3D data using Python."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:76
msgid "Here's how people are using PyVista:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:78
msgid "`PyVista User Stories <https://github.com/pyvista/pyvista/discussions/2133>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:80
msgid "Feel free to write about what you have achieved with PyVista or what you would like to achieve in the future."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:84
msgid "Brief Examples"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:87
msgid "Read a Surface Mesh and Plot it"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:88
msgid "VTK is powerful, really powerful! You can do just about anything within VTK and PyVista just wants to make it easier to do it using ``numpy``-like and ``matplotlib``-like syntax. For example, if you wanted to be able to plot a simple surface mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:107
msgid "**Load and plot a surface dataset**"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:110
msgid "Using ``vtk``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:110
msgid "Using PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:136
msgid "Construct a Simple Point Cloud with Color"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:138
msgid "These examples demonstrate how you can use both PyVista and VTK to construct and visualize a point cloud using ``numpy``. Here, we demonstrate how easy it is to work directly with NumPy arrays."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:144
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "VTK"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:146
msgid "This example was taken from this `SO Answer <https://stackoverflow.com/a/7604478/3369879>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:218
msgid "PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:231
msgid "How other Libraries Compare"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:233
msgid "There are a ton of excellent visualization libraries out there and if you're interested in data visualization, I'd encourage you for explore them all!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:236
msgid "`Python Libraries for Mesh, Point Cloud, and Data Visualization <https://towardsdatascience.com/python-libraries-for-mesh-and-point-cloud-visualization-part-1-daa2af36de30?gi=70edd77e5fc>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:237
msgid "`How does PyVista relate to other visualization tools? <https://github.com/pyvista/pyvista/issues/146>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:238
msgid "`SciVis Libraries <https://pyviz.org/scivis/index.html>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:240
msgid "Here's a few of them:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:244
msgid "vtk"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:246
msgid "The Visualization Toolkit (`VTK <https://vtk.org/>`_) is open source software for manipulating and displaying scientific data. It comes with state-of-the-art tools for 3D rendering, a suite of widgets for 3D interaction, and extensive 2D plotting capability."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:254
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "ParaView"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:256
msgid "`ParaView <https://www.paraview.org/>`_ is an open-source, multi-platform data analysis and visualization application. ParaView users can quickly build visualizations to analyze their data using qualitative and quantitative techniques. The data exploration can be done interactively in 3D or programmatically using ParaView’s batch processing capabilities."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:265
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "vedo"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:267
msgid "`vedo <https://vedo.embl.es/>`_ is a python module for scientific analysis of 3D objects and point clouds based on VTK and numpy."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:273
#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:0
msgid "Mayavi"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:275
msgid "`Mayavi <https://docs.enthought.com/mayavi/mayavi/>`_ is a general purpose, cross-platform tool for 2-D and 3-D scientific data visualization."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:285
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:164
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:248
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:280
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:165
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:387
#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:230
msgid "Exercises"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:286
msgid "Install PyVista by visiting :ref:`getting_started`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:288
msgid "Once you've installed PyVista, open the example below and see if you can run the \"Hello World\" of PyVista. You can download the example by scrolling to the bottom of the page and clicking on either the ``*.py`` (script) or ``*.ipynb`` (notebook) file format."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/index.rst:304
msgid ":ref:`sphx_glr_tutorial_00_intro_a_basic.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:7
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:7
msgid "Computation times"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/sg_execution_times.rst:8
msgid "**00:02.120** total execution time for **tutorial_00_intro** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_00_intro_a_basic.py` (``a_basic.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/sg_execution_times.rst:11
msgid "00:02.120"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/00_intro/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:17
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:17
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:17
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:17
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:11
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:13
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:15
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:17
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:19
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:21
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:23
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:25
msgid "0.0 MB"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_01_basic_a_lesson_basic.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:144
msgid "Basic Usage Lesson"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:26
msgid "This section demonstrates how to use PyVista to reading and plotting 3D data using the `pyvista.examples.downloads <https://docs.pyvista.org/api/examples/_autosummary/pyvista.examples.downloads.html>`_ module and external files."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:52
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:24
msgid "Using Existing Data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:53
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:25
msgid "There are two main ways of getting data into PyVista: creating it yourself from scratch or loading the dataset from any one of the `compatible file formats <https://docs.pyvista.org/api/readers/index.html>`_. Since we're just starting out, let's load a file."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:99
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:58
msgid "Note how this is a :class:`pyvista.PolyData`, which is effectively a surface dataset containing points, lines, and/or faces. We can immediately plot this with:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:123
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:67
msgid "This is a fairly basic plot. You can change how its plotted by adding parameters as ``show_edges=True`` or changing the color by setting ``color`` to a different value. All of this is described in PyVista's API documentation in :func:`pyvista.plot`, but for now let's take a look at another dataset. This one is a volumetric dataset."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:171
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:80
msgid "This is a :class:`pyvista.UniformGrid`, which is a dataset containing a uniform set of points with consistent spacing. When we plot this dataset, we have the option of enabling volumetric plotting, which plots individual cells based on the content of the data associated with those cells."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:199
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:100
msgid "Read from a file"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:200
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:101
msgid "You can read datasets directly from a file if you have access to it locally on your computer. This can be one of the many file formats that VTK supports, and many more that it doesn't as PyVista can rely on libraries like `meshio <https://github.com/nschloe/meshio>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:205
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:106
msgid "In the following example, we load VTK's iron protein dataset `ironProt.vtk <https://github.com/naucoin/VTKData/blob/master/Data/ironProt.vtk>`_ from a file using :func:`pyvista.read`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:252
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:118
msgid "This is again a :class:`pyvista.UniformGrid` and we can plot it volumetrically with:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:276
msgid "**Total running time of the script:** ( 0 minutes  8.571 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:298
msgid ":download:`Download Python source code: a_lesson_basic.py <a_lesson_basic.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/a_lesson_basic.rst:304
msgid ":download:`Download Jupyter notebook: a_lesson_basic.ipynb <a_lesson_basic.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_01_basic_exercises_a_load_examples_exercise.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:177
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:212
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:24
msgid "Download and Plot Examples"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:26
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:30
msgid "Download and plot example datasets."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:28
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:32
msgid "PyVista contains many downloadable datasets documented at `pyvista.examples.downloads <https://docs.pyvista.org/api/examples/_autosummary/pyvista.examples.downloads.html>`_. you can download these through Python and then immediately plot them."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:32
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:36
msgid "This is an easy way to immediately get started with example datasets within PyVista without having to manually copy and load them."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:38
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:42
msgid "Import PyVista and the examples module"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:51
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:61
msgid "Surface DataSet - Download"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:52
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:62
msgid "Download a surface dataset of pine roots. Note how the dataset is automatically loaded right into Python."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:67
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:106
msgid "Surface DataSet - Plot"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:68
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:107
msgid "Plot the pine roots using PyVista's default plotting settings."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:131
msgid "Volume DataSet - Download"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:82
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:132
msgid "Download the bolt dataset. This is an excellent dataset to visualize using \"volumetric\" plotting."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:98
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:176
msgid "Volume DataSet - Plot"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:99
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:177
msgid "Here, we plot the dataset using a custom view direction."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:120
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:209
msgid "Exercise #1 - Use PyVista Examples"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:121
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:210
msgid "Visualize one of PyVista's built in examples."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:123
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:212
msgid "If your IDE supports it, you should be able to type ``dataset = examples.download_`` and press tab to see all the available examples you can download."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:130
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:246
msgid "Exercise #2 - Download and View a File"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:131
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:247
msgid "Experiment on your own by downloading a dataset and reading it in with :class:`pyvista.read`. You can use one of your own files or try downloading one from the following sources:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:135
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:251
msgid "`Sample VTK DataSets <https://github.com/pyvista/vtk-data/tree/master/Data>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:136
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:252
msgid "`Sample STL files <https://www.amtekcompany.com/teaching-resources/stl-files/>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:137
#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:253
msgid "`Thingiverse <https://www.thingiverse.com/>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:142
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:207
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:259
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:164
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:201
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:138
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:125
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:100
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:251
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:113
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:123
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:137
msgid "**Total running time of the script:** ( 0 minutes  0.000 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:164
msgid ":download:`Download Python source code: a_load_examples_exercise.py <a_load_examples_exercise.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/exercises/a_load_examples_exercise.rst:170
msgid ":download:`Download Jupyter notebook: a_load_examples_exercise.ipynb <a_load_examples_exercise.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:10
msgid "Basic usage"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:12
msgid "This section demonstrates how to use PyVista to reading and plotting 3D data using the `pyvista.examples`_ module and external files."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:17
msgid "This section of the tutorial was adopted from the `Basic API Usage <https://docs.pyvista.org/user-guide/simple.html>`_ chapter of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:30
msgid "If you have a dataset handy, like a surface model, point cloud, or VTK file, you can use that. If you don't have something immediately available, PyVista has a variety of files you can download in its `pyvista.examples.downloads <https://docs.pyvista.org/api/examples/_autosummary/pyvista.examples.downloads.html>`_ module."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:36
msgid "Here's a very basic dataset you can download."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:90
msgid "One thing you might have noticed by now is that the plots here in the online tutorial may look slightly different than your plots depending on how you're plotting them on your computer. This depends on your ``jupyter_backend``, or if you're even using a jupyter notebook. As you're playing around with these examples, feel free to change settings like disabling (or enabling) ``notebook``, or using a different plotting backend for displaying within your notebook (if applicable)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:128
msgid "Lesson Material"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:130
msgid "This is the notebook rendering of this page where you can interactively follow along with this lesson."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:144
msgid ":ref:`sphx_glr_tutorial_01_basic_a_lesson_basic.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:177
msgid ":ref:`sphx_glr_tutorial_01_basic_exercises_a_load_examples_exercise.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:197
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:380
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:528
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:294
msgid "Solutions"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:199
msgid "These are the solutions to the above examples."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/index.rst:212
msgid ":ref:`sphx_glr_tutorial_01_basic_solutions_a_load_examples_solution.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/sg_execution_times.rst:8
msgid "**00:08.571** total execution time for **tutorial_01_basic** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_01_basic_a_lesson_basic.py` (``a_lesson_basic.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/sg_execution_times.rst:11
msgid "00:08.571"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_01_basic_solutions_a_load_examples_solution.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:27
msgid "This is the solution to :ref:`load_examples`. If you haven't already tried to solve it on your own, you probably should try that first."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:255
msgid "**Solution** Download the file ``'P_shelf_pin.stl'`` from https://www.thingiverse.com/thing:5412753"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:281
msgid "**Total running time of the script:** ( 0 minutes  6.067 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:303
msgid ":download:`Download Python source code: a_load_examples_solution.py <a_load_examples_solution.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/a_load_examples_solution.rst:309
msgid ":download:`Download Jupyter notebook: a_load_examples_solution.ipynb <a_load_examples_solution.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/sg_execution_times.rst:8
msgid "**00:06.067** total execution time for **tutorial_01_basic_solutions** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_01_basic_solutions_a_load_examples_solution.py` (``a_load_examples_solution.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/01_basic/solutions/sg_execution_times.rst:11
msgid "00:06.067"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_a_lesson_mesh.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:264
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:295
msgid "Lesson Overview"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:24
msgid "This exercise overviews the code in the initial lesson for you to try out!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:44
msgid "What is a Point?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:46
msgid "Let’s start with a point cloud – this is a mesh type that only has vertices. You can create one by defining a 2D array of Cartesian coordinates like so:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:63
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:354
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:78
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:146
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:286
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:67
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:218
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:336
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8053
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:76
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:133
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:64
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:158
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:325
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:379
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:412
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:58
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:99
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:70
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:173
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:99
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:273
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:78
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:76
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:241
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:121
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:313
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:445
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:88
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:155
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:183
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:130
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:94
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:76
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:138
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:92
msgid "Out:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:78
msgid "Pass numpy array of points (n by 3) to PolyData"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:131
msgid "But it’s important to note that most meshes have some sort of connectivity between points such as this gridded mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:187
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:119
msgid "What is a Cell?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:189
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:120
msgid "A cell is the geometry between points that defines the connectivity or topology of a mesh. In the examples above, cells are defined by the lines (edges colored in black) connecting points (colored in red). For example, a cell in the beam example is a voxel defined by the region between eight points in that mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:226
msgid "Cells aren’t limited to voxels, they could be a triangle between three points, a line between two points, or even a single point could be its own cell (but that’s a special case)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:233
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:151
msgid "What are attributes?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:235
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:152
msgid "Attributes are data values that live on either the points or cells of a mesh. In PyVista, we work with both point data and cell data and allow easy access to data dictionaries to hold arrays for attributes that live either on all points or on all cells of a mesh. These attributes can be accessed in a dictionary-like attribute attached to any PyVista mesh accessible as one of the following:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:245
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:164
msgid "Point Data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:246
msgid "Point data refers to arrays of values (scalars, vectors, etc.) that live on each point of the mesh. Each element in an attribute array corresponds to a point in the mesh. Let’s create some point data for the beam mesh. When plotting, the values between points are interpolated across the cells."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:274
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:177
msgid "Cell Data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:275
msgid "Cell data refers to arrays of values (scalars, vectors, etc.) that live throughout each cell of the mesh. That is the entire cell (2D face or 3D volume) is assigned the value of that attribute."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:301
msgid "Here’s a comparison of point data versus cell data and how point data is interpolated across cells when mapping colors. This is unlike cell data which has a single value across the cell’s domain:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:336
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:210
msgid "Field Data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:337
msgid "Field data is not directly associated with either the points or cells but still should be attached to the mesh. This may be a string array storing notes."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:369
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:219
msgid "Assigning Scalars to a Mesh"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:371
msgid "Here’s how we assign values to cell attributes and plot it. Here, we generate cube containing 6 faces and assign each face an integer from ``range(6)`` and then have it plotted."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:375
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:225
msgid "Note how this varies from assigning scalars to each point"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:407
msgid "**Total running time of the script:** ( 0 minutes  3.586 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:429
msgid ":download:`Download Python source code: a_lesson_mesh.py <a_lesson_mesh.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/a_lesson_mesh.rst:435
msgid ":download:`Download Jupyter notebook: a_lesson_mesh.ipynb <a_lesson_mesh.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_exercises_b_create-point-cloud.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:297
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:393
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:24
msgid "Create Point Cloud"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:26
msgid "Create a :class:`pyvista.PolyData` object from a point cloud of vertices and scalar arrays for those points."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:39
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:47
msgid "Point clouds are generally constructed in the :class:`pyvista.PolyData` class and can easily have scalar/vector data arrays associated with the point cloud. In this example, we'll work a bit backwards using a point cloud that that is available from our ``examples`` module. This however is no different than creating a PyVista mesh with your own NumPy arrays of vertice locations."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:67
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:93
msgid "Now that you have a NumPy array of points/vertices either from our sample data or your own project, creating a PyVista mesh of those points:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:131
msgid "Now, perform a sanity check"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:93
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:157
msgid "And now that we have a PyVista mesh, we can plot it. Note that we add an option to use eye dome lighting - this is a shading technique to improve depth perception with point clouds (learn more about `EDL <https://docs.pyvista.org/examples/02-plot/edl.html>`_)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:106
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:181
msgid "Now what if you have data attributes (scalar/vector arrays) that you'd like to associate with every node of your mesh? You can easily add NumPy data arrays that have a length equal to the number of points in the mesh along the first axis. For example, lets add a few arrays to this new ``point_cloud`` mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:112
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:187
msgid "Make an array of scalar values with the same length as the points array. Each element in this array will correspond to points at the same index:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:115
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:190
msgid "Hint, you can use a component of the ``points`` array or use the ``n_points`` property of the mesh object to make an array of that length."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:129
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:210
msgid "Add that data to the mesh with the name \"elevation\""
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:133
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:228
msgid "And now we can plot the point cloud with that elevation data. PyVista is smart enough to plot the scalar array you added by default. Note that this time, we specify to render every point as its own sphere."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:146
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:252
msgid "That data is kind of boring, right? You can also add data arrays with more than one scalar value - perhaps a vector with three elements? Let's make a little function that will compute vectors for every node in the point cloud and add those vectors to the mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:151
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:257
msgid "This time, we're going to create a totally new, random point cloud."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:177
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:301
msgid "Add the vector array as point data to the new mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:181
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:319
msgid "Now we can make arrows using those vectors using the glyph filter (see `this example <https://docs.pyvista.org/examples/01-filter/glyphs.html>`_ for more details)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:229
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:378
msgid ":download:`Download Python source code: b_create-point-cloud.py <b_create-point-cloud.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/b_create-point-cloud.rst:235
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:384
msgid ":download:`Download Jupyter notebook: b_create-point-cloud.ipynb <b_create-point-cloud.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_exercises_c_create-uniform-grid.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:318
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:414
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:22
msgid "Creating a Uniform Grid"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:24
msgid "Create a simple uniform grid from a 3D NumPy array of values."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:37
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:43
msgid "Take a 3D NumPy array of data values that holds some spatial data where each axis corresponds to the XYZ cartesian axes. This example will create a :class:`pyvista.UniformGrid` object that will hold the spatial reference for a 3D grid which a 3D NumPy array of values can be plotted against."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:44
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:50
msgid "Create the 3D NumPy array of spatially referenced data. This is spatially referenced such that the grid is 20 by 5 by 10 (nx by ny by nz)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:58
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:78
msgid "Create the PyVista object"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:70
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:96
msgid "Set the grid dimensions: shape + 1 because we want to inject our values on"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:70
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:96
msgid "the CELL data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:113
msgid "Edit the spatial reference"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:93
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:154
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:131
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:254
msgid "Add the data values to the cell data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:105
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:166
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:174
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:297
msgid "Now plot the grid!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:117
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:197
msgid "Don't like cell data? You could also add the NumPy array to the point data of a :class:`pyvista.UniformGrid`. Take note of the subtle difference when setting the grid dimensions upon initialization."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:135
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:229
msgid "Create the PyVista object and set the same attributes like above"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:179
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:185
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:321
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:535
msgid "Exercise"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:180
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:322
msgid "Now create your own :class:`pyvista.UniformGrid` from a 3D NumPy array!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:191
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8037
msgid "Here are some example 3D data using random data. Feel free to use your own 3D numpy array here!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:204
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8064
msgid "Create the :class:`pyvista.UniformGrid`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:206
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8066
msgid "Hint, you will likely need to ``ravel`` the array with F-ordering: ``arr.ravel(order=\"F\")``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:230
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8107
msgid "Example"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:231
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8108
msgid "Here are some examples of this kind of data in PyVista!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:233
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8110
msgid "See the PyVista documentation for further details on `Volume Rendering <https://docs.pyvista.org/examples/02-plot/volume.html>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:281
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8180
msgid ":download:`Download Python source code: c_create-uniform-grid.py <c_create-uniform-grid.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/c_create-uniform-grid.rst:287
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8186
msgid ":download:`Download Jupyter notebook: c_create-uniform-grid.ipynb <c_create-uniform-grid.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_exercises_d_create-tri-surface.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:339
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:435
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:24
msgid "Create Triangulated Surface"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:26
msgid "Create a surface from a set of points through a Delaunay triangulation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:27
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:29
msgid "We will use a filter from PyVista to perform our triangulation: `delaunay_2d <https://docs.pyvista.org/api/core/_autosummary/pyvista.PolyData.delaunay_2d.html>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:41
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:49
msgid "Simple Triangulations"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:43
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:51
msgid "First, create some points for the surface."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:65
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:91
msgid "Now use those points to create a point cloud PyVista data object. This will be encompassed in a :class:`pyvista.PolyData` object."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:80
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:117
msgid "Now that we have a PyVista data structure of the points, we can perform a triangulation to turn those boring discrete points into a connected surface. See https://docs.pyvista.org/api/core/_autosummary/pyvista.PolyData.delaunay_2d.html"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:93
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:215
msgid "Apply the `delaunay_2d` filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:110
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:243
msgid "Clean Edges & Triangulations"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:139
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:306
msgid "Run the triangulation on these points"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:151
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:329
msgid "Note that some of the outer edges are unconstrained and the triangulation added unwanted triangles. We can mitigate that with the ``alpha`` parameter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:186
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:375
msgid ":download:`Download Python source code: d_create-tri-surface.py <d_create-tri-surface.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/d_create-tri-surface.rst:192
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:381
msgid ":download:`Download Jupyter notebook: d_create-tri-surface.ipynb <d_create-tri-surface.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_exercises_e_read-file.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:360
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:456
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:24
msgid "Load and Plot from a File"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:26
msgid "Read a dataset from a known file type."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:28
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:30
msgid "We try to make loading a mesh as easy as possible - if your data is in one of the many supported file formats, simply use :func:`pyvista.read` to load your spatially referenced dataset into a PyVista mesh object."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:32
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:34
msgid "The following code block uses a built-in example file and displays an airplane mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:53
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:142
msgid "PyVista supports a wide variety of file formats. The supported file extensions are listed in an internal function:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:66
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:307
msgid "The following code block uses a built-in example file, displays an airplane mesh and returns the camera's position:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:336
msgid "Note the above filename, it's a ``.ply`` file - one of the many supported formats in PyVista."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:84
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:339
msgid "Use ``pv.read`` to load the file as a mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:98
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:364
msgid "The points from the mesh are directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:110
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:396
msgid "The faces from the mesh are also directly accessible as a NumPy array:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:123
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:429
msgid "Loading other files types is just as easy! Simply pass your file path to the :func:`pyvista.read` function and that's it!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:126
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:432
msgid "Here are a few other examples - simply replace ``examples.download_*`` in the examples below with ``pyvista.read('path/to/you/file.ext')``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:131
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:437
msgid "Example STL file:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:144
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:461
msgid "Example OBJ file"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:157
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:485
msgid "Example BYU file"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:170
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:509
msgid "Example VTK file"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:186
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:536
msgid "Read a file yourself with :func:`pyvista.read`. If you have a supported file format, use that! Otherwise, download this file: https://github.com/pyvista/pyvista-tutorial/raw/main/tutorial/02_mesh/scipy.vtk"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:223
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:579
msgid ":download:`Download Python source code: e_read-file.py <e_read-file.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/exercises/e_read-file.rst:229
#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:585
msgid ":download:`Download Jupyter notebook: e_read-file.ipynb <e_read-file.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:10
msgid "What is a Mesh?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:17
msgid "This section of the tutorial was adopted from `What is a mesh? <https://docs.pyvista.org/user-guide/what-is-a-mesh.html>`_ chapter of the User Guide in the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:21
msgid "In PyVista, a mesh is any spatially referenced information and usually consists of geometrical representations of a surface or volume in 3D space.  We commonly refer to any spatially referenced dataset as a mesh, so often the distinction between a mesh, a grid, and a volume can get fuzzy – but that does not matter in PyVista. If you have a dataset that is a surface mesh with 2D geometries like triangles, we call it a mesh, and if you have a dataset with 3D geometries like voxels, tetrahedra, hexahedra, etc., then we also call that a mesh! Why? Because it is simple that way."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:31
msgid "In all spatially referenced datasets, there lies an underlying mesh structure – the connectivity or geometry between nodes to define cells. Whether those cells are 2D or 3D is not always of importance and we've worked hard to make PyVista work for datasets of either or mixed geometries so that you as a user do not have to get bogged down in the nuances."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:38
msgid "This is a very high level overview of the PyVista API to familiarize users with PyVista's data structures.  For further details regarding our data model, how it relates to the underlying VTK data model, and how to create your own meshes, please see `this detailed guide of of the Data Model <https://docs.pyvista.org/user-guide/data_model.html>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:45
msgid "What is a point?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:46
msgid "Points are the vertices of the mesh – the Cartesian coordinates of the underlying structure. All PyVista datasets (meshes!) have points and sometimes, you can have a mesh that only has points – like a point cloud."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:51
msgid "For example, you can create a point cloud mesh using the :class:`pyvista.PolyData` class which is built for meshes that have 1D and 2D cell types (we'll get into what a cell is briefly)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:55
msgid "Let's start with a point cloud – this is a mesh type that only has vertices. You can create one by defining a 2D array of Cartesian coordinates like so:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:82
msgid "But it's important to note that most meshes have some sort of connectivity between points such as this gridded mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:102
msgid "Or this triangulated surface:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:145
msgid "Cells aren't limited to voxels, they could be a triangle between three points, a line between two points, or even a single point could be its own cell (but that's a special case)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:159
msgid ":attr:`point_data <pyvista.DataSet.point_data>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:160
msgid ":attr:`cell_data <pyvista.DataSet.cell_data>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:161
msgid ":attr:`field_data <pyvista.DataSet.field_data>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:165
msgid "Point data refers to arrays of values (scalars, vectors, etc.) that live on each point of the mesh.  Each element in an attribute array corresponds to a point in the mesh.  Let's create some point data for the beam mesh.  When plotting, the values between points are interpolated across the cells."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:178
msgid "Cell data refers to arrays of values (scalars, vectors, etc.) that live throughout each cell of the mesh.  That is the entire cell (2D face or 3D volume) is assigned the value of that attribute."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:189
msgid "Here's a comparison of point data versus cell data and how point data is interpolated across cells when mapping colors. This is unlike cell data which has a single value across the cell's domain:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:211
msgid "Field data is not directly associated with either the points or cells but still should be attached to the mesh.  This may be a string array storing notes, or even indices of a `Collision <https://docs.pyvista.org/examples/01-filter/collisions.html>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:221
msgid "Here's how we assign values to cell attributes and plot it.  Here, we generate cube containing 6 faces and assign each face an integer from ``range(6)`` and then have it plotted."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:242
msgid "We use :func:`pyvista.PolyDataFilters.clean` to merge the faces of the cube since, by default, the cube is created with unmerged faces and duplicate points."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:250
msgid "For more examples, please see the mesh creation section of the `PyVista Examples Gallery <https://docs.pyvista.org/examples/index.html#mesh-creation>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:264
msgid ":ref:`sphx_glr_tutorial_02_mesh_a_lesson_mesh.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:284
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:453
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:198
msgid "Do it yourself"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:297
msgid ":ref:`sphx_glr_tutorial_02_mesh_exercises_b_create-point-cloud.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:318
msgid ":ref:`sphx_glr_tutorial_02_mesh_exercises_c_create-uniform-grid.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:339
msgid ":ref:`sphx_glr_tutorial_02_mesh_exercises_d_create-tri-surface.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:360
msgid ":ref:`sphx_glr_tutorial_02_mesh_exercises_e_read-file.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:393
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_b_create-point-cloud.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:414
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_c_create-uniform-grid.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:435
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_d_create-tri-surface.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/index.rst:456
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_e_read-file.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/sg_execution_times.rst:8
msgid "**00:03.586** total execution time for **tutorial_02_mesh** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_02_mesh_a_lesson_mesh.py` (``a_lesson_mesh.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/sg_execution_times.rst:11
msgid "00:03.586"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_soultions_b_create-point-cloud.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/b_create-point-cloud.rst:356
msgid "**Total running time of the script:** ( 0 minutes  4.447 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_soultions_c_create-uniform-grid.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/c_create-uniform-grid.rst:8158
msgid "**Total running time of the script:** ( 0 minutes  5.354 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_soultions_d_create-tri-surface.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/d_create-tri-surface.rst:353
msgid "**Total running time of the script:** ( 0 minutes  1.275 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_02_mesh_soultions_e_read-file.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/e_read-file.rst:557
msgid "**Total running time of the script:** ( 0 minutes  3.294 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:8
msgid "**00:14.369** total execution time for **tutorial_02_mesh_soultions** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_c_create-uniform-grid.py` (``c_create-uniform-grid.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:11
msgid "00:05.354"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_b_create-point-cloud.py` (``b_create-point-cloud.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:13
msgid "00:04.447"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_e_read-file.py` (``e_read-file.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:15
msgid "00:03.294"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_tutorial_02_mesh_soultions_d_create-tri-surface.py` (``d_create-tri-surface.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/02_mesh/soultions/sg_execution_times.rst:17
msgid "00:01.275"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_a_lesson_figures.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:43
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:45
msgid "``add_mesh``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:45
msgid "When plotting, users must first create a :class:`pyvista.Plotter` instance (much like a Matplotlib figure). Then data are added to the plotter instance through the :func:`pyvista.Plotter.add_mesh` method. This workflow typically looks like:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:70
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:73
msgid "You can customize how that mesh is displayed through the parameters of the :func:`pyvista.Plotter.add_mesh` method. For example, we can change the colormap via the ``cmap`` argument:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:95
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:84
msgid "Or show the edges of the mesh with ``show_edges``:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:120
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:93
msgid "Or adjust the opacity to be a scalar value or linear transfer function via the ``opacity`` argument:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:147
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:107
msgid "Take a look at all of the options for `add_mesh <https://docs.pyvista.org/api/plotting/_autosummary/pyvista.Plotter.add_mesh.html>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:149
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:109
msgid "The ``add_mesh`` method can be called over and over to add different data to the same ``Plotter`` scene. For example, we can create many different mesh objects and plot them together:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:196
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:146
msgid "Subplotting"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:198
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:148
msgid "Creating side-by-side comparisons of datasets is easy with PyVista's subplotting API. Get started by specifying the shape of the :class:`pyvista.Plotter` object then registering the active subplot by the :func:`pyvista.Plotter.subplot` method much like how you subplot with Matplotlib's API."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:228
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:165
msgid "Below is an example of side-by-side comparisons of the contours and slices of a single dataset."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:232
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:169
msgid "You can link the cameras of both views with the :func:`pyvista.Plotter.link_views` method"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:268
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:242
msgid "Axes and Bounds"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:270
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:244
msgid "Aexs can be added to the scene with :func:`pyvista.Plotter.show_axes`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:299
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:258
msgid "And bounds similarly with :func:`pyvista.Plotter.show_bounds`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:303
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:262
msgid "See `Plotting Bounds <https://docs.pyvista.org/examples/02-plot/bounds.html>`_ for more details."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:331
msgid "**Total running time of the script:** ( 0 minutes  4.254 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:353
msgid ":download:`Download Python source code: a_lesson_figures.py <a_lesson_figures.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/a_lesson_figures.rst:359
msgid ":download:`Download Jupyter notebook: a_lesson_figures.ipynb <a_lesson_figures.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_b_shading.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:316
msgid "Types of Shading"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:26
msgid "Comparison of default, flat shading vs. smooth shading."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:44
msgid "PyVista supports two types of shading: flat and smooth shading that uses VTK's Phong shading algorithm."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:47
msgid "This is a plot with the default flat shading."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:71
msgid "Here's the same sphere with smooth shading."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:94
msgid "Note how smooth shading makes edges that should be sharp look odd, it's because the points of these normals are averaged between two faces that have a sharp angle between them.  You can avoid this by enabling ``split_sharp_edges``."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:100
msgid "You can configure the splitting angle with the optional ``feature_angle`` keyword argument."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:124
msgid "We can even plot the edges that will be split using :func:`extract_feature_edges <pyvista.PolyDataFilters.extract_feature_edges>`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:159
msgid "The ``split_sharp_edges`` keyword argument is compatible with physically based rendering as well."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:187
msgid "**Total running time of the script:** ( 0 minutes  1.485 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:209
msgid ":download:`Download Python source code: b_shading.py <b_shading.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/b_shading.rst:215
msgid ":download:`Download Jupyter notebook: b_shading.ipynb <b_shading.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_bonus_d_pbr.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:391
msgid "Physically Based Rendering"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:26
msgid "VTK 9 introduced Physically Based Rendering (PBR) and we have exposed that functionality in PyVista. Read the `blog about PBR <https://blog.kitware.com/vtk-pbr/>`_ for more details."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:30
msgid "PBR is only supported for :class:`pyvista.PolyData` and can be triggered via the ``pbr`` keyword argument of ``add_mesh``. Also use the ``metallic`` and ``roughness`` arguments for further control."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:34
msgid "Let's show off this functionality by rendering a high quality mesh of a statue as though it were metallic."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:62
msgid "Let's render the mesh with a base color of \"linen\" to give it a metal looking finish."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:94
msgid "Show the variation of the metallic and roughness parameters."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:96
msgid "Plot with metallic increasing from left to right and roughness increasing from bottom to top."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:132
msgid "Combine custom lighting and physically based rendering."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:178
msgid "**Total running time of the script:** ( 1 minutes  7.013 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:200
msgid ":download:`Download Python source code: d_pbr.py <d_pbr.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/d_pbr.rst:206
msgid ":download:`Download Jupyter notebook: d_pbr.ipynb <d_pbr.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_bonus_e_labels.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:412
msgid "Label Points"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:24
msgid "Use string arrays in a point set to label points"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:43
msgid "The :func:`pyvista.Plotter.add_point_labels` method makes it easy to add point labels to a scene."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:187
msgid "Label Point Cloud"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:189
msgid "Let's make a random point cloud and label each point in 3D space"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:208
msgid "Add string labels to the point data - this associates a label with every node:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:251
msgid "Now plot the points with labels using :func:`pyvista.Plotter.add_point_labels`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:292
msgid "Label Node Locations"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:294
msgid "This example will label the nodes of a mesh with their coordinate locations"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:314
msgid "Create plotting class and add the unstructured grid"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:348
msgid "Label Scalar Values"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:350
msgid "This example will label each point with their scalar values"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:396
msgid "**Total running time of the script:** ( 0 minutes  0.873 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:418
msgid ":download:`Download Python source code: e_labels.py <e_labels.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/e_labels.rst:424
msgid ":download:`Download Jupyter notebook: e_labels.ipynb <e_labels.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_bonus_g_orbit.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:433
msgid "Orbiting"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:26
msgid "Orbit around a scene."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:29
msgid "The quality of the movie will be better when using ``p.open_movie('orbit.mp4')`` instead of ``p.open_gif('orbit.gif')``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:33
msgid "For orbiting to work you first have to show the scene and leave the plotter open with ``.show(auto_close=False)``.  You may also have to set ``pv.Plotter(off_screen=True)``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:38
msgid "Use ``lighting=False`` to reduce the size of the color space to avoid \"jittery\" GIFs when showing the scalar bar."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:60
msgid "Orbit around the Mt. St Helens dataset."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:158
msgid "**Total running time of the script:** ( 1 minutes  22.430 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:180
msgid ":download:`Download Python source code: g_orbit.py <g_orbit.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/g_orbit.rst:186
msgid ":download:`Download Jupyter notebook: g_orbit.ipynb <g_orbit.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:8
msgid "**02:30.315** total execution time for **tutorial_03_figures_bonus** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_g_orbit.py` (``g_orbit.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:11
msgid "01:22.430"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_d_pbr.py` (``d_pbr.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:13
msgid "01:07.013"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_e_labels.py` (``e_labels.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/bonus/sg_execution_times.rst:15
msgid "00:00.873"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_c_geological-map.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:337
msgid "Geological Map on Topography"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:24
msgid "Texture mapping for a GeoTIFF on a topography surface."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:26
msgid "To overlay an image/map from a GeoTIFF on to a topography surface, it's necessary to have texture coordinates (\"texture mapping\") matching the proper extends of the mesh/surface you'd like to drape the texture (GeoTIFF) on."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:28
msgid "We can do this by using the spatial reference of the GeoTIFF itself, as this allows you to preserve the entire mesh that the texture is being draped on without having to clip out the parts where you don't have imagery. In this example, we explicitly set the texture extents onto a topography surface where the texture/GeoTIFF has a much larger extent than the topography surface."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:30
msgid "Originally posted here: https://github.com/pyvista/pyvista-support/issues/14"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:82
msgid "Load the GeoTIFF/texture (this could take a minute to download) https://dl.dropbox.com/s/bp9j3fl3wbi0fld/downsampled_Geologic_map_on_air_photo.tif?dl=0"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:110
msgid "In the block below, we can use the ``get_gcps`` function to get the Ground Control Points of the raster, however this depends on GDAL. For this tutorial, we are going to hard code the GCPs to avoid having users install GDAL."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:205
msgid "Show GCPs in relation to topo surface with texture coordinates displayed"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:242
msgid "Read the GeoTIFF as a ``Texture`` in PyVista:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:275
msgid "**Total running time of the script:** ( 0 minutes  6.847 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:297
msgid ":download:`Download Python source code: c_geological-map.py <c_geological-map.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/c_geological-map.rst:303
msgid ":download:`Download Jupyter notebook: c_geological-map.ipynb <c_geological-map.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_d_gif.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:358
msgid "Create a GIF Movie"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:25
msgid "Generate a moving gif from an active plotter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:28
msgid "Use ``lighting=False`` to reduce the size of the color space to avoid \"jittery\" GIFs, especially for the scalar bar."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:92
msgid "**Total running time of the script:** ( 0 minutes  2.496 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:114
msgid ":download:`Download Python source code: d_gif.py <d_gif.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/d_gif.rst:120
msgid ":download:`Download Jupyter notebook: d_gif.ipynb <d_gif.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_exercises_a_display_options.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:466
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:541
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:22
msgid "Display Options"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:24
msgid "Take a look at the different display options offered by the ``add_mesh`` method."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:42
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:53
msgid "Let's take a look at some different options for the ``add_mesh`` method to alter how the above data are displayed."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:54
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:418
msgid "Plot that mesh with the edges of cells displayed"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:67
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:442
msgid "Plot that mesh with the colored edges and as a show the surface as a solid color (use a named color!)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:467
msgid "Display with a points representation style"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:94
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:491
msgid "And adjust the points display size"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:107
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:515
msgid "Change the color map and the color limits"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:120
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:539
msgid "Add some opacity"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:133
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:563
msgid "There you go! Those are a few of the most commonly used display options!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:160
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:590
msgid ":download:`Download Python source code: a_display_options.py <a_display_options.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/a_display_options.rst:166
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:596
msgid ":download:`Download Jupyter notebook: a_display_options.ipynb <a_display_options.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_exercises_b_lighting_mesh.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:487
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:562
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:24
msgid "Lighting Properties"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:26
msgid "Control aspects of the rendered mesh's lighting such as Ambient, Diffuse, and Specular. These options only work if the ``lighting`` argument to ``add_mesh`` is ``True`` (it's ``True`` by default)."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:28
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:30
msgid "You can turn off all lighting for the given mesh by passing ``lighting=False`` to ``add_mesh``."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:31
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:33
msgid "See the ``add_mesh`` docs for lighting options: https://docs.pyvista.org/api/plotting/_autosummary/pyvista.Plotter.add_mesh.html"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:48
msgid "First, let's take a look at the mesh with default lighting conditions"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:59
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:78
msgid "What about with no lighting?"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:70
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:100
msgid "Demonstration of the specular property"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:72
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:102
msgid "Feel free to adjust the specular value in the ``s`` variable."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:96
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:137
msgid "Specular power (feel free to adjust)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:107
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:159
msgid "Demonstration of all diffues, specular, and ambient in use together (feel free to adjust)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:119
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:182
msgid "For detailed control over lighting conditions in general see the `lighting examples <https://docs.pyvista.org/examples/index.html#lighting>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:147
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:210
msgid ":download:`Download Python source code: b_lighting_mesh.py <b_lighting_mesh.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/b_lighting_mesh.rst:153
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:216
msgid ":download:`Download Jupyter notebook: b_lighting_mesh.ipynb <b_lighting_mesh.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_exercises_c_edl.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:508
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:583
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:24
msgid "Eye Dome Lighting"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:26
msgid "Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique designed to improve depth perception in scientific visualization images. To learn more, please see `this blog post`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:42
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:50
msgid "Point Cloud"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:44
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:52
msgid "When plotting a simple point cloud, it can be difficult to perceive depth. Take this Lidar point cloud for example:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:58
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:95
msgid "And now plot this point cloud as-is:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:74
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:122
msgid "We can improve the depth mapping by enabling eye dome lighting on the renderer with :func:`pyvista.Renderer.enable_eye_dome_lighting`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:77
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:125
msgid "Try plotting that point cloud with Eye-Dome-Lighting yourself below:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:93
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:152
msgid "The eye dome lighting mode can also handle plotting scalar arrays. Try the above block but by specifying a ``scalars`` array instead of ``color`` in the ``add_mesh`` call."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:122
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:202
msgid ":download:`Download Python source code: c_edl.py <c_edl.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/exercises/c_edl.rst:128
#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:208
msgid ":download:`Download Jupyter notebook: c_edl.ipynb <c_edl.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:10
msgid "Plotting Options and Animations"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:12
msgid "Demonstrate many features of the PyVista plotting API to create compelling 3D visualizations and touch on animations (10 min for talk, 10 min for exercise)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:16
msgid "This section of the tutorial was adopted from the Plotting section of `PyVista's Example Gallery <https://docs.pyvista.org/examples/index.html#plotting>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:20
msgid "PyVista enables many possibilities for altering how you display 3D data, a few of our most common features include:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:23
msgid "Color mapping scalar values with ``matplotlib`` colormaps"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:24
msgid "Showing the edges and nodes of different mesh types"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:25
msgid "Label points in 3D space along side your meshes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:26
msgid "Creating side-by-side comparisons"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:27
msgid "Making a dataset transparent or using a scalar value to map opacity"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:28
msgid "Adding textures/images draped over a mesh (texture mapping)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:29
msgid "Use sophisticated lighting techniques like smooth shading or Eye Dome Lighting"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:30
msgid "Creating animations as GIFs or movie files"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:32
msgid "This section will overview PyVista's :class:`pyvista.Plotter` API and how to perform these tasks. The goal of this lesson is not to be a comprehensive overview of PyVista's plotting API, but rather to demonstrate how it works and how you can learn to use it!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:38
msgid "The Basics"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:40
msgid "PyVista's plotting API is data-centric, where the 3D data are individually added to the scene with different display parameters in a matplotlib-like fashion."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:47
msgid "When plotting, users must first create a :class:`pyvista.Plotter` instance (much like a matplotlib figure). Then data are added to the plotter instance through the :func:`pyvista.Plotter.add_mesh` method. This workflow typically looks like:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:192
msgid "Other custom layouts are supported by the ``shape`` argument as string descriptors:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:194
msgid "``shape=\"3|1\"`` means 3 plots on the left and 1 on the right,"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:195
msgid "``shape=\"4/2\"`` means 4 plots on top and 2 at the bottom."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:197
msgid "Here is an example of three plots on the right and one on the left:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:230
msgid "There is a comprehensive overview of subplotting in the `Multi-Window Plotting Example <https://docs.pyvista.org/examples/02-plot/multi-window.html>`_ This example details how to create more complex layouts."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:235
msgid "Controlling the Scene"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:239
msgid "For a full list of methods on the :class:`pyvista.Plotter`, please see the `API documentation <https://docs.pyvista.org/api/plotting/_autosummary/pyvista.Plotter.html>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:295
msgid ":ref:`sphx_glr_tutorial_03_figures_a_lesson_figures.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:316
msgid ":ref:`sphx_glr_tutorial_03_figures_b_shading.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:337
msgid ":ref:`sphx_glr_tutorial_03_figures_c_geological-map.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:358
msgid ":ref:`sphx_glr_tutorial_03_figures_d_gif.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:378
msgid "Bonus Content"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:391
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_d_pbr.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:412
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_e_labels.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:433
msgid ":ref:`sphx_glr_tutorial_03_figures_bonus_g_orbit.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:466
msgid ":ref:`sphx_glr_tutorial_03_figures_exercises_a_display_options.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:487
msgid ":ref:`sphx_glr_tutorial_03_figures_exercises_b_lighting_mesh.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:508
msgid ":ref:`sphx_glr_tutorial_03_figures_exercises_c_edl.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:541
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_a_display_options.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:562
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_b_lighting_mesh.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/index.rst:583
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_c_edl.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:8
msgid "**00:15.081** total execution time for **tutorial_03_figures** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_03_figures_c_geological-map.py` (``c_geological-map.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:11
msgid "00:06.847"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_03_figures_a_lesson_figures.py` (``a_lesson_figures.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:13
msgid "00:04.254"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_03_figures_d_gif.py` (``d_gif.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:15
msgid "00:02.496"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_tutorial_03_figures_b_shading.py` (``b_shading.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/sg_execution_times.rst:17
msgid "00:01.485"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_solutions_a_display_options.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:56
msgid "See also https://docs.pyvista.org/api/plotting/_autosummary/pyvista.Plotter.add_mesh.html"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/a_display_options.rst:568
msgid "**Total running time of the script:** ( 0 minutes  2.796 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_solutions_b_lighting_mesh.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:56
msgid "First, lets take a look at the mesh with default lighting conditions"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/b_lighting_mesh.rst:188
msgid "**Total running time of the script:** ( 0 minutes  4.065 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_03_figures_solutions_c_edl.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/c_edl.rst:180
msgid "**Total running time of the script:** ( 0 minutes  13.968 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:8
msgid "**00:20.830** total execution time for **tutorial_03_figures_solutions** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_c_edl.py` (``c_edl.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:11
msgid "00:13.968"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_b_lighting_mesh.py` (``b_lighting_mesh.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:13
msgid "00:04.065"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_03_figures_solutions_a_display_options.py` (``a_display_options.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/03_figures/solutions/sg_execution_times.rst:15
msgid "00:02.796"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_a_lesson_filters.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:178
msgid "Using Common Filters"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:26
msgid "Using common filters like thresholding and clipping."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:45
msgid "PyVista wrapped data objects have a suite of common filters ready for immediate use directly on the object. These filters include the following (see :ref:`filters_ref` for a complete list):"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:49
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:25
msgid "`slice()`_ creates a single slice through the input dataset on a user defined plane"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:50
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:26
msgid "`slice_orthogonal()`_: creates a :class:`pyvista.MultiBlock` dataset of three orthogonal slices"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:51
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:27
msgid "`slice_along_axis()`_: creates a :class:`pyvista.MultiBlock` dataset of many slices along a specified axis"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:52
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:28
msgid "`threshold()`_: Thresholds a dataset by a single value or range of values"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:53
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:29
msgid "`threshold_percent()`_: Threshold by percentages of the scalar range"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:54
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:30
msgid "`clip()`_: Clips the dataset by a user defined plane"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:55
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:31
msgid "`outline_corners()`_: Outlines the corners of the data extent"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:56
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:32
msgid "`extract_geometry()`_: Extract surface geometry"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:67
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:44
msgid "To use these filters, call the method of your choice directly on your data object:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:92
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:73
msgid "And now there is a thresholded version of the input dataset in the new ``threshed`` object. To learn more about what keyword arguments are available to alter how filters are executed, print the docstring for any filter attached to PyVista objects with either ``help(dataset.threshold)`` or using ``shift+tab`` in an IPython environment."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:98
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:79
msgid "We can now plot this filtered dataset along side an outline of the original dataset"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:127
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:93
msgid "What about other filters? Let's collect a few filter results and compare them:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:186
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:134
msgid "Filter Pipeline"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:188
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:136
msgid "In VTK, filters are often used in a pipeline where each algorithm passes its output to the next filtering algorithm. In PyVista, we can mimic the filtering pipeline through a chain; attaching each filter to the last filter. In the following example, several filters are chained together:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:193
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:141
msgid "First, and empty ``threshold`` filter to clean out any ``NaN`` values."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:194
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:142
msgid "Use an ``elevation`` filter to generate scalar values corresponding to height."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:195
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:143
msgid "Use the ``clip`` filter to cut the dataset in half."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:196
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:144
msgid "Create three slices along each axial plane using the ``slice_orthogonal`` filter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:199
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:146
msgid "Apply a filtering chain"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:216
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:152
msgid "And to view this filtered data, simply call the ``plot`` method (``result.plot()``) or create a rendering scene:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:244
msgid "**Total running time of the script:** ( 0 minutes  1.922 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:266
msgid ":download:`Download Python source code: a_lesson_filters.py <a_lesson_filters.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/a_lesson_filters.rst:272
msgid ":download:`Download Jupyter notebook: a_lesson_filters.ipynb <a_lesson_filters.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_exercises_b_clipping.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:211
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:307
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:24
msgid "Clipping with Planes & Boxes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:26
msgid "Clip/cut any dataset using using planes or boxes."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:37
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:45
msgid "Clip with Plane"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:39
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:47
msgid "Clip any dataset by a user defined plane using the :func:`pyvista.DataSetFilters.clip` filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:59
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:177
msgid "Perform a clip with a Y axis normal"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:85
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:243
msgid "Clip with Bounds"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:87
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:245
msgid "Clip any dataset by a set of XYZ bounds using the :func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:106
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:340
msgid "Clip the dataset with a bounding box defined by the values in ``bounds`` (xmin, xmax, ymin, ymax, zmin, zmax)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:133
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:408
msgid "Clip with Rotated Box"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:135
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:410
msgid "Clip any dataset by an arbitrarily rotated solid box using the :func:`pyvista.DataSetFilters.clip_box` filter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:156
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:442
msgid "Run the box clipping algorithm with the defined box geometry"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:178
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:475
msgid "Crinkled Clipping"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:179
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:476
msgid "Crinkled clipping is useful if you don’t want the clip filter to truly clip cells on the boundary, but want to preserve the input cell structure and to pass the entire cell on through the boundary."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:183
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:480
msgid "This option is available for :func:`pyvista.DataSetFilters.clip`, :func:`pyvista.DataSetFilters.clip_box`, and :func:`pyvista.DataSetFilters.clip_sruface`, but not available when clipping by scalar in :func:`pyvista.DataSetFilters.clip_scalar`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:199
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:502
msgid "Define clipping plane"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:211
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:520
msgid "Perform a standard clip"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:222
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:537
msgid "Perform a crinkled clip to compare"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:233
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:554
msgid "Plot comparison"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:273
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:605
msgid ":download:`Download Python source code: b_clipping.py <b_clipping.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/b_clipping.rst:279
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:611
msgid ":download:`Download Jupyter notebook: b_clipping.ipynb <b_clipping.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_exercises_c_compute-normals.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:232
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:328
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:24
msgid "Computing Surface Normals"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:25
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:27
msgid "Compute normals on a surface."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:42
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:55
msgid "Now we have a surface dataset of the globe loaded - unfortunately, the dataset shows the globe with a uniform radius which hides topographic relief. Using :func:`pyvista.PolyData.compute_normals`, we can compute the normal vectors on the globe at all points in the dataset, then use the values given in the dataset to warp the surface in the normals direction to create some exaggerated topographic relief."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:60
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:104
msgid "Now use those normals to warp the surface"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:71
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:121
msgid "And let's see it!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:83
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:144
msgid "We could also use face/cell normals to extract all the faces of a mesh facing a general direction. In the following snippet, we take a mesh, compute the normals along its cell faces, and extract the faces that face upward."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:135
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:207
msgid ":download:`Download Python source code: c_compute-normals.py <c_compute-normals.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/c_compute-normals.rst:141
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:213
msgid ":download:`Download Jupyter notebook: c_compute-normals.ipynb <c_compute-normals.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_exercises_d_contouring.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:253
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:349
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:24
msgid "Contouring"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:26
msgid "Generate iso-lines or -surfaces for the scalars of a surface or volume."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:26
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:28
msgid "3D meshes can have 2D iso-surfaces of a scalar field extracted and 2D surface meshes can have 1D iso-lines of a scalar field extracted."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:41
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:49
msgid "Iso-Lines"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:43
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:51
msgid "Let's extract 1D iso-lines of a scalar field from a 2D surface mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:80
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:221
msgid "Iso-Surfaces"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:82
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:223
msgid "Let's extract 2D iso-surfaces of a scalar field from a 3D mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:95
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:267
msgid "For this example dataset, let's create 5 contour levels between the values of 50 and 200"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:145
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:334
msgid ":download:`Download Python source code: d_contouring.py <d_contouring.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/d_contouring.rst:151
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:340
msgid ":download:`Download Jupyter notebook: d_contouring.ipynb <d_contouring.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_exercises_e_glyphs.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:274
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:370
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:24
msgid "Plotting Glyphs (Vectors or PolyData)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:26
msgid "Use vectors in a dataset to plot and orient glyphs/geometric objects."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:37
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:45
msgid "Example dataset with normals"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:48
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:62
msgid "Glyphying can be done via the :func:`pyvista.DataSetFilters.glyph` filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:59
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:170
msgid "Sometimes you might not want glyphs for every node in the input dataset. In this case, you can choose to build glyphs for a subset of the input dataset by using a merging tolerance. Here we specify a merging tolerance of five percent which equates to five percent of the bounding box's length."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:64
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:175
msgid "create a subset of arrows using the glyph filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:86
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:214
msgid "A common approach is to load vectors directly to the mesh object and then access the :attr:`pyvista.DataSet.arrows` property to produce glyphs."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:123
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:282
msgid "Plot the arrows and the sphere."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:159
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:329
msgid ":download:`Download Python source code: e_glyphs.py <e_glyphs.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/exercises/e_glyphs.rst:165
#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:335
msgid ":download:`Download Jupyter notebook: e_glyphs.ipynb <e_glyphs.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:10
msgid "Filters"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:12
msgid "Demonstrate the PyVista filters API to perform mesh analysis and alteration"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:17
msgid "This section of the tutorial was adopted from the Filtering section of `PyVista's Example Gallery <https://docs.pyvista.org/examples/index.html#filtering>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:21
msgid "PyVista mesh objects have a suite of common filters ready for immediate use directly on the object. These filters include the following (see `Filters API <https://docs.pyvista.org/api/core/filters.html>`_ for a complete list):"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:178
msgid ":ref:`sphx_glr_tutorial_04_filters_a_lesson_filters.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:211
msgid ":ref:`sphx_glr_tutorial_04_filters_exercises_b_clipping.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:232
msgid ":ref:`sphx_glr_tutorial_04_filters_exercises_c_compute-normals.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:253
msgid ":ref:`sphx_glr_tutorial_04_filters_exercises_d_contouring.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:274
msgid ":ref:`sphx_glr_tutorial_04_filters_exercises_e_glyphs.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:307
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_b_clipping.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:328
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_c_compute-normals.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:349
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_d_contouring.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/index.rst:370
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_e_glyphs.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/sg_execution_times.rst:8
msgid "**00:01.922** total execution time for **tutorial_04_filters** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_04_filters_a_lesson_filters.py` (``a_lesson_filters.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/sg_execution_times.rst:11
msgid "00:01.922"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_solutions_b_clipping.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/b_clipping.rst:583
msgid "**Total running time of the script:** ( 0 minutes  2.428 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_solutions_c_compute-normals.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/c_compute-normals.rst:185
msgid "**Total running time of the script:** ( 0 minutes  16.232 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_solutions_d_contouring.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/d_contouring.rst:312
msgid "**Total running time of the script:** ( 0 minutes  7.930 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_04_filters_solutions_e_glyphs.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/e_glyphs.rst:307
msgid "**Total running time of the script:** ( 0 minutes  1.207 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:8
msgid "**00:27.796** total execution time for **tutorial_04_filters_solutions** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_c_compute-normals.py` (``c_compute-normals.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:11
msgid "00:16.232"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_d_contouring.py` (``d_contouring.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:13
msgid "00:07.930"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_b_clipping.py` (``b_clipping.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:15
msgid "00:02.428"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_tutorial_04_filters_solutions_e_glyphs.py` (``e_glyphs.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/04_filters/solutions/sg_execution_times.rst:17
msgid "00:01.207"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:50
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:40
msgid "PteraSoftware"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:78
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:68
msgid "Stﾃｩphane Laurent's artwork"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:106
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:96
#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:145
#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:0
msgid "VesselVio"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:134
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:124
msgid "Atmospheric Convection"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:162
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:152
msgid "Damavand Volcano"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:190
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:180
msgid "Anvil Cirrus Plumes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:218
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:208
msgid "Optimization visualization with PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:246
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:236
msgid "FLEM: A diffusive landscape evolution model"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:274
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:264
msgid "Orvisu Demo Application"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:302
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:292
msgid "PyMeshFix's example gallery"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:330
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:320
msgid "TetGen's example gallery"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:358
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:348
msgid "PVGeo's example gallery"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:386
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:376
msgid "FORGE Geothermal Project"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:414
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:404
msgid "AeroSandbox"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:442
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:432
msgid "OpenFOAM Rendering"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:470
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:460
msgid "3D Rendering with Discretize"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:498
#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:488
msgid "3D visualization for the Open Mining Format (omf)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:5
msgid "PyVista in Action"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:7
msgid "Show how PyVista is already being used within several projects and can be used for all things visualization. (15 min for talk)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:11
msgid "This section of the tutorial was adopted from `External Examples <https://docs.pyvista.org/getting-started/external_examples.html>`_ chapter of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:17
msgid "Here are a list of longer, more technical examples of what PyVista can do!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/05_action/index.rst:21
msgid "Please note that these examples link to external websites. If any of these links are broken, please raise an issue on the repository."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_06_vtk_a_1_transition_vtk.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:21
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:402
msgid "Transitioning from VTK to PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:24
msgid "VTK is primarily developed in C++ and uses chained setter and getter commands to access data. Instead, PyVista wraps the VTK data types into numpy arrays so that users can benefit from its bracket syntax and fancy indexing.  This section demonstrates the difference between the two approaches in a series of examples."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:30
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:30
msgid "For example, to hard-code values for a `vtk.vtkImageData`_ data structure using VTK Python's bindings, one would write the following:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:57
msgid "Create values for a 300x300 image dataset"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:59
msgid "In our example, we want to have values from the function"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:87
msgid "Create the image structure"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:107
msgid "Assign the values to the image"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:132
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:60
msgid "As you can see, there is quite a bit of boilerplate that goes into the creation of a simple `vtk.vtkImageData`_ dataset. PyVista provides much more concise syntax that is more \"Pythonic\". The equivalent code in PyVista is:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:154
msgid "Use the meshgrid function to create 2D \"grids\" of the x and y values. This section effectively replaces the vtkDoubleArray."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:175
msgid "Create the grid.  Note how the values must use Fortran ordering."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:194
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:83
msgid "Here, PyVista has done several things for us:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:196
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:85
msgid "PyVista combines the dimensionality of the data (in the shape of the :class:`numpy.ndarray`) with the values of the data in one line. VTK uses \"tuples\" to describe the shape of the data (where it sits in space) and \"components\" to describe the type of data (1 = scalars/scalar fields, 2 = vectors/vector fields, n = tensors/tensor fields). Here, shape and values are stored concretely in one variable."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:204
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:93
msgid ":class:`pyvista.UniformGrid` wraps `vtk.vtkImageData`_, just with a different name; they are both containers of evenly spaced points. Your data does not have to be an \"image\" to use it with `vtk.vtkImageData`_; rather, like images, values in the dataset are evenly spaced apart like pixels in an image."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:210
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:99
msgid "Furthermore, since we know the container is for uniformly spaced data, pyvista sets the origin and spacing by default to ``(0, 0, 0)`` and ``(1, 1, 1)``. This is another great thing about PyVista and Python! Rather than having to know everything about the VTK library up front, you can get started very easily! Once you get more familiar with it and need to do something more complex, you can dive deeper. For example, changing the origin and spacing is as simple as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:223
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:112
msgid "The name for the :attr:`point_array <pyvista.point_array>` is given directly in dictionary-style fashion. Also, since VTK stores data on the heap (linear segments of RAM; a C++ concept), the data must be flattened and put in Fortran ordering (which controls how multidimensional data is laid out in physically 1d memory; numpy uses \"C\"-style memory layout by default). This is why in our earlier example, the first argument to ``SetValue()`` was written as ``x*300 + y``. Here, numpy takes care of this for us quite nicely and it's made more explicit in the code, following the Python best practice of \"Explicit is better than implicit\"."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:234
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:123
msgid "Finally, with PyVista, each geometry class contains methods that allow you to immediately plot the mesh without also setting up the plot. For example, in VTK you would have to do:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:255
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:142
msgid "However, with PyVista you only need:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:280
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:172
msgid "PointSet Construction"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:281
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:173
msgid "PyVista heavily relies on NumPy to efficiently allocate and access VTK's C arrays.  For example, to create an array of points within VTK one would normally loop through all the points of a list and supply that to a  `vtkPoints`_ class.  For example:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:337
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:197
msgid "To do the same within PyVista, you simply need to create a NumPy array:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:356
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:207
msgid "You can use :func:`pyvista.vtk_points` to construct a `vtkPoints`_ object, but this is unnecessary in almost all situations."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:359
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:210
msgid "Since the end goal is to construct a :class:`pyvista.DataSet <pyvista.core.dataset.DataSet>`, you would simply pass the ``np_points`` array to the :class:`pyvista.PolyData` constructor:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:380
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:219
msgid "Whereas in VTK you would have to do:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:399
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:226
msgid "The same goes with assigning face or cell connectivity/topology.  With VTK you would normally have to loop using :func:`InsertNextCell` and :func:`InsertCellPoint`.  For example, to create a single cell (triangle) and then assign it to `vtkPolyData`_:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:425
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:240
msgid "In PyVista, we can assign this directly in the constructor and then access it (or change it) from the :attr:`faces <pyvista.PolyData.faces>` attribute."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:457
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:252
msgid "PyVista Tradeoffs"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:458
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:253
msgid "While most features can, not everything can be simplified in PyVista without losing functionality or performance."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:461
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:256
msgid "In the :class:`collision <pyvista.PolyDataFilters.collision>` filter, we demonstrate how to calculate the collision between two meshes.  For example:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:507
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:287
msgid "Under the hood, the collision filter detects mesh collisions using oriented bounding box (OBB) trees.  For a single collision, this filter is as performant as the VTK counterpart, but when computing multiple collisions with the same meshes, as in the `Collision Example <https://docs.pyvista.org/examples/01-filter/collisions.html>`_ example, it is more efficient to use the `vtkCollisionDetectionFilter <https://vtk.org/doc/nightly/html/classvtkCollisionDetectionFilter.html>`_, as the OBB tree is computed once for each mesh.  In most cases, pure PyVista is sufficient for most data science, but there are times when you may want to use VTK classes directly."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:520
msgid "**Total running time of the script:** ( 0 minutes  1.218 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:542
msgid ":download:`Download Python source code: a_1_transition_vtk.py <a_1_transition_vtk.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_1_transition_vtk.rst:548
msgid ":download:`Download Jupyter notebook: a_1_transition_vtk.ipynb <a_1_transition_vtk.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_06_vtk_a_2_pyvista_vtk.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:299
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:423
msgid "PyVista and VTK Together"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:24
msgid "PyVista is best known for is easy to use plotting API -- being familiar to most Python users already experienced with libraries like Matplotlib. Many people benefit from combining the power of VTK's Python bindings for their data pipelines and the flexibility and simplicity of PyVista for 3D rendering. The following section demonstrates this usage scenario."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:28
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:305
msgid "In case it was not made clear in the :ref:`mesh` section, PyVista mesh classes are subclasses of their VTK counterparts - which means PyVista can be intermixed with VTK workflows."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:30
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:307
msgid "Nothing stops you from using VTK classes and then wrapping the output with PyVista for streamlined plotting. For example:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:56
msgid "Create a circle using vtk"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:78
msgid "wrap and plot using pyvista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:101
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:327
msgid "In this manner, you can get the \"best of both worlds\" should you need the flexibility of PyVista and the raw power of VTK."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:105
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:331
msgid "You can use :func:`pyvista.Polygon` for a one line replacement of the above VTK code."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:111
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:335
msgid "VTK Algorithms"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:113
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:337
msgid "Perhaps there is a VTK algorithm that is not (yet) exposed in PyVista that you'd like to use. This is easy enough to work with since PyVista objects are VTK objects. We can pass our PyVista meshes to the VTK algorithm, then wrap the output for plotting, further filtering, or anything."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:131
msgid "Initialize VTK algorithm"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:148
msgid "Pass PyVista object as input to VTK"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:165
msgid "Set parameters"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:187
msgid "Retrieve output and wrap with PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:204
msgid "Use PyVista to produce contours"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:221
msgid "Use PyVista to plot"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:248
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:377
msgid "The above example was adapted from VTK's `Embed Points Into Volume <https://kitware.github.io/vtk-examples/site/Cxx/PolyData/EmbedPointsIntoVolume/>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:253
msgid "**Total running time of the script:** ( 0 minutes  1.271 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:275
msgid ":download:`Download Python source code: a_2_pyvista_vtk.py <a_2_pyvista_vtk.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/a_2_pyvista_vtk.rst:281
msgid ":download:`Download Jupyter notebook: a_2_pyvista_vtk.ipynb <a_2_pyvista_vtk.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_06_vtk_b_create_vtk.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:444
msgid "Create VTK Objects"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:24
msgid "This exercise walks through the creation of a few different types of VTK datasets."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:49
msgid "Create ``vtkImageData``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:69
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:166
msgid "Add point data"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:99
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:194
msgid "Plot with PyVista for simplicity"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:122
msgid "Create ``vtkStructuredGrid``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:216
msgid "**Total running time of the script:** ( 0 minutes  0.655 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:238
msgid ":download:`Download Python source code: b_create_vtk.py <b_create_vtk.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/b_create_vtk.rst:244
msgid ":download:`Download Jupyter notebook: b_create_vtk.ipynb <b_create_vtk.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_06_vtk_c_vtk_algorithms.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:465
msgid "Using VTK Algorithms"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:24
msgid "In this exercise, you will use a VTK Algorithm directly to filter a PyVista mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:26
msgid "VTK algorithms (filters) follow a standard flow for most cases:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:28
msgid "Instantiate the algorithm"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:29
msgid "Set the input data object or connection: ``.SetInputDataObject(mesh)``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:30
msgid "Adjust algorithm parameters with the setter methods, e.g., ``SetParameterName(value)``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:31
msgid "Call ``.Update()`` to run the algorithm"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:32
msgid "Retrieve the output of the algorithm: ``output = alg.GetOutput()``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:34
msgid "Let's see if we can try a few VTK algorithms with that standard workflow."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:54
msgid "Here is a sample mesh"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:115
msgid "Simple Filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:116
msgid "Let's start out with a simple VTK filter: ``vtkOutlineFilter``"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1275
msgid "Try using this VTK filter yourself here:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1277
msgid "Remember that you will have to wrap the output of the algorithm with :func:`pyvista.wrap`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1354
msgid "Note that the about filter can be replaced with a ``.outline()`` filter in PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1381
msgid "Find your own filter"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1383
msgid "Take a look at VTK's examples and documentation to find a filter you'd like to apply to you mesh. The instructors will be around to help you implement."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1386
msgid "See https://kitware.github.io/vtk-examples/site/Python/"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1391
msgid "**Total running time of the script:** ( 0 minutes  0.776 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1413
msgid ":download:`Download Python source code: c_vtk_algorithms.py <c_vtk_algorithms.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/c_vtk_algorithms.rst:1419
msgid ":download:`Download Jupyter notebook: c_vtk_algorithms.ipynb <c_vtk_algorithms.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:10
msgid "PyVista & VTK"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:12
msgid "Show how PyVista uses VTK and how you can combine the best of both worlds! (10 minutes for talk, 10 minutes for exercise)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:16
msgid "This section of the tutorial was adopted from the `Transitioning from VTK to PyVista <https://docs.pyvista.org/user-guide/vtk_to_pyvista.html>`_ chapter of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:301
msgid "PyVista is best known for is easy to use plotting API -- being familiar to most Python users already experienced with libraries like matplotlib. Many people benefit from combining the power of VTK's Python bindings for their data pipelines and the flexibility and simplicity of PyVista for 3D rendering. The following section demonstrates this usage scenario."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:402
msgid ":ref:`sphx_glr_tutorial_06_vtk_a_1_transition_vtk.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:423
msgid ":ref:`sphx_glr_tutorial_06_vtk_a_2_pyvista_vtk.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:444
msgid ":ref:`sphx_glr_tutorial_06_vtk_b_create_vtk.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/index.rst:465
msgid ":ref:`sphx_glr_tutorial_06_vtk_c_vtk_algorithms.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:8
msgid "**00:03.921** total execution time for **tutorial_06_vtk** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_06_vtk_a_2_pyvista_vtk.py` (``a_2_pyvista_vtk.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:11
msgid "00:01.271"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_06_vtk_a_1_transition_vtk.py` (``a_1_transition_vtk.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:13
msgid "00:01.218"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_06_vtk_c_vtk_algorithms.py` (``c_vtk_algorithms.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:15
msgid "00:00.776"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_tutorial_06_vtk_b_create_vtk.py` (``b_create_vtk.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/06_vtk/sg_execution_times.rst:17
msgid "00:00.655"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:10
msgid "PyVista and Sphinx"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:16
msgid "This section of the tutorial was adopted from `Plotting Themes <https://docs.pyvista.org/user-guide/themes.html>`_ and `Sphinx PyVista Plot Directive <https://docs.pyvista.org/extras/plot_directive.html>`_ chapter of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:22
msgid "Dynamically Generating 3D Plots in your Documentation"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:23
msgid "PyVista allows you to generate static or dynamic images directly within Sphinx much like the `matplotlib plot_directive <https://matplotlib.org/stable/api/sphinxext_plot_directive_api.html>`_. Rather than manually creating and adding plots after code sections, you can instead dynamically generate images and embed them directly within your documentation. This also works seamlessly with `sphinx-gallery <https://sphinx-gallery.github.io/>`_, so you can create notebook examples just like the `matplotlib Example Gallery <https://matplotlib.org/stable/gallery/index.html>`_."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:33
msgid "As an added side benefit, you can be sure that the documentation you generate matches your project API. If you include this within a `GitHub Workflow <https://docs.github.com/en/actions/using-workflows/about-workflows>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:37
msgid "This section covers the following topics."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:39
msgid ":ref:`static_plots`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:40
msgid ":ref:`dynamic_plots`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:45
msgid "Static Plotting - Sphinx PyVista Plot Directive"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:46
msgid "You can generate static images of PyVista plots within sphinx using the ``pyvista-plot`` directive by adding the following to your ``conf.py`` when building your documentation using Sphinx."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:57
msgid "You can then issue the plotting directive within your sphinx documentation files::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:68
msgid "Which will be rendered as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:14
msgid "This is a default sphere"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:82
msgid "Dynamic Plotting Using the Jupyter Sphinx Extension"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:83
msgid "PyVista also supports the `jupyter-sphinx <https://jupyter-sphinx.readthedocs.io/>`_ extension. With this extension you can execute code blocks within a sphinx ``*.rst`` file using the ``jupyter-execute`` directive::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:93
msgid "Will be rendered as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:102
msgid "Likewise, output from PyVista that would normally be rendered within a notebook will be rendered in the output cell from the ``jupyter-execute`` directive. For example, here's a plot using the `pythreejs <https://github.com/jupyter-widgets/pythreejs>`_ backend::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:113
msgid "Which is rendered as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:123
msgid "Using the ``Panel`` backend with PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:124
msgid "PyVista supports the usage of the `panel <https://github.com/holoviz/panel>`_ library as a ``vtk.js`` jupyterlab plotting backend that can be utilized as either a standalone VTK viewer, or as a tightly integrated ``pyvista`` plotting backend.  For example, within a Jupyter notebook environment, you can pass ``jupyter_backend='panel'`` to ``plot``, or ``Plotter.show`` to automatically enable plotting with Juptyer and ``panel``."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:131
msgid "For example, here's the ``PyVista`` logo::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:138
msgid "Which is shown within the documentation as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:148
msgid "Examples and Usage"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:149
msgid "There are two ways to use `panel <https://github.com/holoviz/panel>`_ within Jupyter notebooks.  You can use it on a plot by plot basis by setting the ``jupyter_backend`` in ``mesh.plot()``::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:168
msgid "And here's the resulting output in Sphinx:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:187
msgid "Or you can first hide code that sets up the plotting backend and global theme::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:205
msgid "And now just directly execute ``plot`` on any dataset::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:213
msgid "Which looks like:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:223
msgid "You have the option of choosing `panel <https://github.com/holoviz/panel>`_ or `pythreejs <https://github.com/jupyter-widgets/pythreejs>`_ as a backend, but you might find that `panel <https://github.com/holoviz/panel>`_ has better support as it's being actively developed."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:232
msgid "Generate Sphinx documentation on your own using the `pyvista/pyvista-doc-example <https://github.com/pyvista/pyvista-doc-example>`_ repository. Either clone the repository with::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:238
msgid "Or simply download the repository:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:242
msgid "`PyVista Documentation Example <https://github.com/pyvista/pyvista-doc-example>`_"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:252
msgid "Build the documentation"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:254
msgid "Once you've downloaded `pyvista/pyvista-doc-example <https://github.com/pyvista/pyvista-doc-example>`_, cd into the directory and install the documentation build requirements with::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:261
msgid "Finally, build the documentation locally with::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:266
msgid "Or, if on Windows::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/07_sphinx/index.rst:271
msgid "You will then find the generated documentation within the ``doc/_build`` directory. Open up ``index.html`` using your browser to see the documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_a_box-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:45
msgid "Box Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:26
msgid "The box widget can be enabled and disabled by the :func:`pyvista.Plotter.add_box_widget` and :func:`pyvista.Plotter.clear_box_widgets` methods respectively. When enabling the box widget, you must provide a custom callback function otherwise the box would appear and do nothing - the callback functions are what allow us to leverage the widget to perform a task like clipping/cropping."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:33
msgid "Considering that using a box to clip/crop a mesh is one of the most common use cases, we have included a helper method that will allow you to add a mesh to a scene with a box widget that controls its extent, the :func:`pyvista.Plotter.add_mesh_clip_box` method."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:81
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:62
msgid "After interacting with the scene, the clipped mesh is available as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:113
msgid "**Total running time of the script:** ( 0 minutes  6.797 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:135
msgid ":download:`Download Python source code: a_box-widget.py <a_box-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/a_box-widget.rst:141
msgid ":download:`Download Jupyter notebook: a_box-widget.ipynb <a_box-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_b_checkbox-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:66
msgid "Checkbox Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:26
msgid "Use a checkbox to turn on/off the visibility of meshes in a scene."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:28
msgid "See :func:`pyvista.Plotter.add_checkbox_button_widget` for more details."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:46
msgid "Single Checkbox"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:80
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:168
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:95
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:131
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:94
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:156
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:206
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:110
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:155
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:101
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:159
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:262
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:88
msgid "And here is a screen capture of a user interacting with this"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:87
msgid "Multiple Checkboxes"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:89
msgid "In this example, we will add many meshes to a scene with unique colors and create corresponding checkboxes for those meshes of the same color to toggle their visibility in the scene."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:175
msgid "**Total running time of the script:** ( 0 minutes  0.721 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:197
msgid ":download:`Download Python source code: b_checkbox-widget.py <b_checkbox-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/b_checkbox-widget.rst:203
msgid ":download:`Download Jupyter notebook: b_checkbox-widget.ipynb <b_checkbox-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_c_line-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:87
msgid "Line Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:26
msgid "The line widget can be enabled and disabled by the :func:`pyvista.Plotter.add_line_widget` and :func:`pyvista.Plotter.clear_line_widgets` methods respectively. Unfortunately, PyVista does not have any helper methods to utilize this widget, so it is necessary to pass a custom callback method."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:32
msgid "One particularly fun example is to use the line widget to create a source for the :func:`pyvista.DataSetFilters.streamlines` filter. Again note the use of the ``name`` argument in ``add_mesh``."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:102
msgid "**Total running time of the script:** ( 0 minutes  1.863 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:124
msgid ":download:`Download Python source code: c_line-widget.py <c_line-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/c_line-widget.rst:130
msgid ":download:`Download Jupyter notebook: c_line-widget.ipynb <c_line-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_d_multi-slider-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:108
msgid "Multiple Slider Widgets"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:24
msgid "Use a class based callback to track multiple slider widgets for updating a single mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:27
msgid "In this example we simply change a few parameters for the :func:`pyvista.Sphere` method, but this could easily be applied to any mesh-generating/altering code."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:138
msgid "**Total running time of the script:** ( 0 minutes  0.297 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:160
msgid ":download:`Download Python source code: d_multi-slider-widget.py <d_multi-slider-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/d_multi-slider-widget.rst:166
msgid ":download:`Download Jupyter notebook: d_multi-slider-widget.ipynb <d_multi-slider-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_e_plane-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:129
msgid "Plane Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:26
msgid "The plane widget can be enabled and disabled by the :func:`pyvista.Plotter.add_plane_widget` and :func:`pyvista.Plotter.clear_plane_widgets` methods respectively. As with all widgets, you must provide a custom callback method to utilize that plane. Considering that planes are most commonly used for clipping and slicing meshes, we have included two helper methods for doing those tasks!"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:33
msgid "Let's use a plane to clip a mesh:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:100
msgid "Or you could slice a mesh using the plane widget:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:124
msgid "After interacting with the scene, the slice is available as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:162
msgid "Or you could leverage the plane widget for some custom task like glyphing a vector field along that plane. Note that we have to pass a ``name`` when calling ``add_mesh`` to ensure that there is only one set of glyphs plotted at a time."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:212
msgid "Further, a user can disable the arrow vector by setting the ``normal_rotation`` argument to ``False``. For example, here we programmatically set the normal vector on which we want to translate the plane and we disable the arrow to prevent its rotation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:240
msgid "The vector is also forcibly disabled anytime the ``assign_to_axis`` argument is set."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:266
msgid "Additionally, users can modify the interaction event that triggers the callback functions handled by the different plane widget helpers through the ``interaction_event`` keyword argument when available. For example, we can have continuous slicing by using the ``InteractionEvent`` observer."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:295
msgid "And here is a screen capture of a user interacting with this continuously via the ``InteractionEvent`` observer:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:303
msgid "**Total running time of the script:** ( 0 minutes  8.196 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:325
msgid ":download:`Download Python source code: e_plane-widget.py <e_plane-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/e_plane-widget.rst:331
msgid ":download:`Download Jupyter notebook: e_plane-widget.ipynb <e_plane-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_f_slider-bar-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:24
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:150
msgid "Slider Bar Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:26
msgid "The slider widget can be enabled and disabled by the :func:`pyvista.Plotter.add_slider_widget` and :func:`pyvista.Plotter.clear_slider_widgets` methods respectively. This is one of the most versatile widgets as it can control a value that can be used for just about anything."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:46
msgid "One helper method we've added is the :func:`pyvista.Plotter.add_mesh_threshold` method which leverages the slider widget to control a thresholding value."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:78
msgid "After interacting with the scene, the threshold mesh is available as:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:117
msgid "Custom Callback"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:119
msgid "Or you could leverage a custom callback function that takes a single value from the slider as its argument to do something like control the resolution of a mesh. Again note the use of the ``name`` argument in ``add_mesh``:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:162
msgid "**Total running time of the script:** ( 0 minutes  2.351 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:184
msgid ":download:`Download Python source code: f_slider-bar-widget.py <f_slider-bar-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/f_slider-bar-widget.rst:190
msgid ":download:`Download Jupyter notebook: f_slider-bar-widget.ipynb <f_slider-bar-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_g_sphere-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:171
msgid "Sphere Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:24
msgid "The sphere widget can be enabled and disabled by the :func:`pyvista.Plotter.add_sphere_widget` and :func:`pyvista.Plotter.clear_sphere_widgets` methods respectively. This is a very versatile widget as it can control vertex location that can be used to control or update the location of just about anything."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:30
msgid "We don't have any convenient helper methods that utilize this widget out of the box, but we have added a lot of ways to use this widget so that you can easily add several widgets to a scene."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:34
msgid "Let's look at a few use cases that all update a surface mesh."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:51
msgid "Example A"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:53
msgid "Use a single sphere widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:108
msgid "Example B"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:110
msgid "Use several sphere widgets at once"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:166
msgid "Example C"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:168
msgid "This one is the coolest - use four sphere widgets to update perturbations on a surface and interpolate between them with some boundary conditions"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:269
msgid "**Total running time of the script:** ( 0 minutes  0.959 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:291
msgid ":download:`Download Python source code: g_sphere-widget.py <g_sphere-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/g_sphere-widget.rst:297
msgid ":download:`Download Jupyter notebook: g_sphere-widget.ipynb <g_sphere-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorial_08_widgets_h_spline-widget.py>` to download the full example code or to run this example in your browser via Binder"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:22
#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:192
msgid "Spline Widget"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:25
msgid "A spline widget can be enabled and disabled by the :func:`pyvista.Plotter.add_spline_widget` and :func:`pyvista.Plotter.clear_spline_widgets` methods respectively. This widget allows users to interactively create a poly line (spline) through a scene and use that spline."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:31
msgid "A common task with splines is to slice a volumetric dataset using an irregular path. To do this, we have added a convenient helper method which leverages the :func:`pyvista.DataSetFilters.slice_along_line` filter named :func:`pyvista.Plotter.add_mesh_slice_spline`."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:95
msgid "**Total running time of the script:** ( 0 minutes  0.422 seconds)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:117
msgid ":download:`Download Python source code: h_spline-widget.py <h_spline-widget.py>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/h_spline-widget.rst:123
msgid ":download:`Download Jupyter notebook: h_spline-widget.ipynb <h_spline-widget.ipynb>`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:10
msgid "Widgets in PyVista"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:12
msgid "PyVista has several widgets that can be added to the rendering scene to control filters like clipping, slicing, and thresholding - specifically there are widgets to control the positions of boxes, planes, and lines or slider bars which can all be highly customized through the use of custom callback functions."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:18
msgid "Here we’ll take a look at the various widgets, some helper methods that leverage those widgets to do common tasks, and demonstrate how to leverage the widgets for user defined tasks and processing routines."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:24
msgid "This section of the tutorial was adopted from the `widgets section <https://docs.pyvista.org/examples/index.html?highlight=widgets#widgets>`_ of the PyVista example documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:30
msgid "Widget Examples"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:45
msgid ":ref:`sphx_glr_tutorial_08_widgets_a_box-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:66
msgid ":ref:`sphx_glr_tutorial_08_widgets_b_checkbox-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:87
msgid ":ref:`sphx_glr_tutorial_08_widgets_c_line-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:108
msgid ":ref:`sphx_glr_tutorial_08_widgets_d_multi-slider-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:129
msgid ":ref:`sphx_glr_tutorial_08_widgets_e_plane-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:150
msgid ":ref:`sphx_glr_tutorial_08_widgets_f_slider-bar-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:171
msgid ":ref:`sphx_glr_tutorial_08_widgets_g_sphere-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/index.rst:192
msgid ":ref:`sphx_glr_tutorial_08_widgets_h_spline-widget.py`"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:8
msgid "**00:21.606** total execution time for **tutorial_08_widgets** files:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:11
msgid ":ref:`sphx_glr_tutorial_08_widgets_e_plane-widget.py` (``e_plane-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:11
msgid "00:08.196"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:13
msgid ":ref:`sphx_glr_tutorial_08_widgets_a_box-widget.py` (``a_box-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:13
msgid "00:06.797"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:15
msgid ":ref:`sphx_glr_tutorial_08_widgets_f_slider-bar-widget.py` (``f_slider-bar-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:15
msgid "00:02.351"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:17
msgid ":ref:`sphx_glr_tutorial_08_widgets_c_line-widget.py` (``c_line-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:17
msgid "00:01.863"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:19
msgid ":ref:`sphx_glr_tutorial_08_widgets_g_sphere-widget.py` (``g_sphere-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:19
msgid "00:00.959"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:21
msgid ":ref:`sphx_glr_tutorial_08_widgets_b_checkbox-widget.py` (``b_checkbox-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:21
msgid "00:00.721"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:23
msgid ":ref:`sphx_glr_tutorial_08_widgets_h_spline-widget.py` (``h_spline-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:23
msgid "00:00.422"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:25
msgid ":ref:`sphx_glr_tutorial_08_widgets_d_multi-slider-widget.py` (``d_multi-slider-widget.py``)"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/08_widgets/sg_execution_times.rst:25
msgid "00:00.297"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:10
msgid "PyVista and QT"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:12
msgid "Demonstrate how to use PyVista to create standalone applications using `pyinstaller <https://www.pyinstaller.org/>`_ and the Qt framework."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:17
msgid "This section of the tutorial was adopted from the `pyvistaqt documentation <https://qtdocs.pyvista.org/>`_ and the `Extras <https://docs.pyvista.org/extras/>`_ chapters of the PyVista documentation."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:23
msgid "Using PyVista with QT"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:25
msgid "PyVista has an interface for placing plots in QT `(see QT) <https://www.qt.io/>`_ in the `pyvistaqt <https://qtdocs.pyvista.org/>`_ library that allows you to combine QT with VTK.  This simplifies adding meshes, updating, and controlling them when using Qt."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:30
msgid "Installation using ``pip`` is::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:35
msgid "To install this package with ``conda`` run::"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:39
msgid "Once installed, use the :class:`pyvistaqt.BackgroundPlotter` like any PyVista plotter."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:44
msgid "Brief Example"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:46
msgid "Create an instance of the :class:`pyvistaqt.BackgroundPlotter` and plot a sphere."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:62
msgid "Sample PyQt5 pyvista QtInteractor"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:66
msgid "Background Plotting"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:68
msgid "Normal PyVista plotting windows exhibit blocking behavior, but it is possible to plot in the background and update the plotter in real-time using :class:`pyvistaqt.BackgroundPlotter`.  This requires `pyvistaqt <https://qtdocs.pyvista.org/>`_, but otherwise appears and functions like a normal PyVista :class:`pyvista.Plotter` instance. For example:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:89
msgid "Multiple Plotters"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:91
msgid "The following example shows how to use an interface with multiple plotters. Each plotter can be selected and functions like a normal PyVista :class:`pyvista.Plotter` instance:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:108
msgid "Freezing PyVista with pyinstaller"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:109
msgid "You can make some fantastic standalone programs with `pyinstaller <https://www.pyinstaller.org/>`_ and PyVista, and you can even make a graphical user interface incorporating `PyQt5 <https://pypi.org/project/PyQt5/>`_ or `pyside2 <https://pypi.org/project/PySide2/>`_.  Depending on your version of VTK, this requires some extra steps to setup."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:116
msgid "When running VTK v9, you need to add several additional ``hiddenimports``.  For clarity and completeness, create a spec file (we'll name it ``pyvista.spec``) following the directions given at `Using Spec Files <https://pyinstaller.readthedocs.io/en/stable/spec-files.html>`__.  Modify the ``Analysis`` and add the following hidden imports:"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:136
msgid "From there, you can freeze an application using PyVista and create a standalone application."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:141
msgid "Examples"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:147
msgid "`VesselVio <https://jacobbumgarner.github.io/VesselVio/>`_ is open-source application for the analysis and visualization of segemented vasculature datasets."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:154
#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:0
msgid "MNE"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:156
msgid "`MNE <https://mne.tools/stable/index.html>`_ Open-source Python package for exploring, visualizing, and analyzing human neurophysiological data: MEG, EEG, sEEG, ECoG, NIRS, and more."
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:163
#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:0
msgid "femorph"
msgstr ""

#: ../../pyvista-tutorial/doc/source/tutorial/09_qt/index.rst:165
msgid "`femorph <https://www.wpafb.af.mil/News/Article-Display/Article/1503043/afrl-signs-first-of-its-kind-software-license-with-pratt-whitney/>`_ is a mesh metamorphosis software particularly suited for updating finite element models to match optical scan data."
msgstr ""
