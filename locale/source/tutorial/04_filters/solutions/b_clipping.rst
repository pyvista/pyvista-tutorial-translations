
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/04_filters/solutions/b_clipping.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_04_filters_solutions_b_clipping.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_04_filters_solutions_b_clipping.py:


.. _clip_with_plane_box_example:

Clipping with Planes & Boxes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Clip/cut any dataset using using planes or boxes.

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. code-block:: default

    import pyvista as pv
    from pyvista import examples








.. GENERATED FROM PYTHON SOURCE LINES 14-19

Clip with Plane
+++++++++++++++

Clip any dataset by a user defined plane using the
:func:`pyvista.DataSetFilters.clip` filter

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default

    dataset = examples.download_bunny_coarse()
    dataset






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1000</td></tr>
    <tr><td>N Points</td><td>872</td></tr>
    <tr><td>X Bounds</td><td>-1.316e-01, 1.802e-01</td></tr>
    <tr><td>Y Bounds</td><td>-1.205e-01, 1.877e-01</td></tr>
    <tr><td>Z Bounds</td><td>-1.430e-01, 9.851e-02</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>Normals</td><td>Points</td><td>float32</td><td>3</td><td>-9.998e-01</td><td>9.977e-01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: default

    help(dataset.clip)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on method clip in module pyvista.core.filters.data_set:

    clip(normal='x', origin=None, invert=True, value=0.0, inplace=False, return_clipped=False, progress_bar=False, crinkle=False) method of pyvista.core.pointset.PolyData instance
        Clip a dataset by a plane by specifying the origin and normal.
    
        If no parameters are given the clip will occur in the center
        of that dataset.
    
        Parameters
        ----------
        normal : tuple(float) or str
            Length 3 tuple for the normal vector direction. Can also
            be specified as a string conventional direction such as
            ``'x'`` for ``(1,0,0)`` or ``'-x'`` for ``(-1,0,0)``, etc.
    
        origin : tuple(float), optional
            The center ``(x,y,z)`` coordinate of the plane on which the clip
            occurs. The default is the center of the dataset.
    
        invert : bool, optional
            Flag on whether to flip/invert the clip.
    
        value : float, optional
            Set the clipping value along the normal direction.
            The default value is 0.0.
    
        inplace : bool, optional
            Updates mesh in-place.
    
        return_clipped : bool, optional
            Return both unclipped and clipped parts of the dataset.
    
        progress_bar : bool, optional
            Display a progress bar to indicate progress.
    
        crinkle : bool, optional
            Crinkle the clip by extracting the entire cells along the
            clip. This adds the ``"cell_ids"`` array to the ``cell_data``
            attribute that tracks the original cell IDs of the original
            dataset.
    
        Returns
        -------
        pyvista.PolyData or tuple(pyvista.PolyData)
            Clipped mesh when ``return_clipped=False``,
            otherwise a tuple containing the unclipped and clipped datasets.
    
        Examples
        --------
        Clip a cube along the +X direction.  ``triangulate`` is used as
        the cube is initially composed of quadrilateral faces and
        subdivide only works on triangles.
    
        >>> import pyvista as pv
        >>> cube = pv.Cube().triangulate().subdivide(3)
        >>> clipped_cube = cube.clip()
        >>> clipped_cube.plot()
    
        Clip a cube in the +Z direction.  This leaves half a cube
        below the XY plane.
    
        >>> import pyvista as pv
        >>> cube = pv.Cube().triangulate().subdivide(3)
        >>> clipped_cube = cube.clip('z')
        >>> clipped_cube.plot()
    
        See :ref:`clip_with_surface_example` for more examples using this filter.





.. GENERATED FROM PYTHON SOURCE LINES 26-27

Perform a clip with a Y axis normal

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    clipped = dataset.clip('y', invert=False)
    clipped






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>427</td></tr>
    <tr><td>N Points</td><td>248</td></tr>
    <tr><td>X Bounds</td><td>-1.316e-01, 1.326e-01</td></tr>
    <tr><td>Y Bounds</td><td>3.360e-02, 1.877e-01</td></tr>
    <tr><td>Z Bounds</td><td>-1.430e-01, 8.721e-02</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>Normals</td><td>Points</td><td>float32</td><td>3</td><td>-9.927e-01</td><td>9.977e-01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 31-39

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(dataset, style='wireframe', color='blue', label='Input')
    p.add_mesh(clipped, label='Clipped')
    p.add_legend()
    p.camera_position = [(0.24, 0.32, 0.7), (0.02, 0.03, -0.02), (-0.12, 0.93, -0.34)]
    p.show()





.. image-sg:: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_001.png
   :alt: b clipping
   :srcset: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 40-45

Clip with Bounds
++++++++++++++++

Clip any dataset by a set of XYZ bounds using the
:func:`pyvista.DataSetFilters.clip_box` filter.

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    dataset = examples.download_office()








.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    help(dataset.clip_box)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Help on method clip_box in module pyvista.core.filters.data_set:

    clip_box(bounds=None, invert=True, factor=0.35, progress_bar=False, merge_points=True, crinkle=False) method of pyvista.core.pointset.StructuredGrid instance
        Clip a dataset by a bounding box defined by the bounds.
    
        If no bounds are given, a corner of the dataset bounds will be removed.
    
        Parameters
        ----------
        bounds : tuple(float), optional
            Length 6 sequence of floats: (xmin, xmax, ymin, ymax, zmin, zmax).
            Length 3 sequence of floats: distances from the min coordinate of
            of the input mesh. Single float value: uniform distance from the
            min coordinate. Length 12 sequence of length 3 sequence of floats:
            a plane collection (normal, center, ...).
            :class:`pyvista.PolyData`: if a poly mesh is passed that represents
            a box with 6 faces that all form a standard box, then planes will
            be extracted from the box to define the clipping region.
    
        invert : bool, optional
            Flag on whether to flip/invert the clip.
    
        factor : float, optional
            If bounds are not given this is the factor along each axis to
            extract the default box.
    
        progress_bar : bool, optional
            Display a progress bar to indicate progress.
    
        merge_points : bool, optional
            If ``True`` (default), coinciding points of independently
            defined mesh elements will be merged.
    
        crinkle : bool, optional
            Crinkle the clip by extracting the entire cells along the
            clip. This adds the ``"cell_ids"`` array to the ``cell_data``
            attribute that tracks the original cell IDs of the original
            dataset.
    
        Returns
        -------
        pyvista.UnstructuredGrid
            Clipped dataset.
    
        Examples
        --------
        Clip a corner of a cube.  The bounds of a cube are normally
        ``[-0.5, 0.5, -0.5, 0.5, -0.5, 0.5]``, and this removes 1/8 of
        the cube's surface.
    
        >>> import pyvista as pv
        >>> cube = pv.Cube().triangulate().subdivide(3)
        >>> clipped_cube = cube.clip_box([0, 1, 0, 1, 0, 1])
        >>> clipped_cube.plot()
    
        See :ref:`clip_with_plane_box_example` for more examples using this filter.





.. GENERATED FROM PYTHON SOURCE LINES 51-53

Clip the dataset with a bounding box defined by the values in ``bounds``
(xmin, xmax, ymin, ymax, zmin, zmax)

.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    bounds = [2, 4.5, 2, 4.5, 1, 3]
    clipped = dataset.clip_box(bounds)
    clipped






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>38690</td></tr>
    <tr><td>N Points</td><td>9438</td></tr>
    <tr><td>X Bounds</td><td>1.000e-02, 4.500e+00</td></tr>
    <tr><td>Y Bounds</td><td>1.000e-02, 4.500e+00</td></tr>
    <tr><td>Z Bounds</td><td>1.000e-02, 2.500e+00</td></tr>
    <tr><td>N Arrays</td><td>2</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>scalars</b></td><td>Points</td><td>float32</td><td>1</td><td>-3.870e+00</td><td>7.186e-01</td></tr>
    <tr><td>vectors</td><td>Points</td><td>float32</td><td>3</td><td>-6.729e-01</td><td>4.289e-01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-65

.. code-block:: default

    p = pv.Plotter()
    p.add_mesh(dataset, style='wireframe', color='blue', label='Input')
    p.add_mesh(clipped, label='Clipped')
    p.add_legend()
    p.show()





.. image-sg:: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_002.png
   :alt: b clipping
   :srcset: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-71

Clip with Rotated Box
+++++++++++++++++++++

Clip any dataset by an arbitrarily rotated solid box using the
:func:`pyvista.DataSetFilters.clip_box` filter.

.. GENERATED FROM PYTHON SOURCE LINES 71-82

.. code-block:: default

    mesh = examples.load_airplane()

    # Use `pv.Box()` or `pv.Cube()` to create a region of interest
    roi = pv.Cube(center=(0.9e3, 0.2e3, mesh.center[2]), x_length=500, y_length=500, z_length=500)
    roi.rotate_z(33, inplace=True)

    p = pv.Plotter()
    p.add_mesh(roi, opacity=0.75, color="red")
    p.add_mesh(mesh, opacity=0.5)
    p.show()




.. image-sg:: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_003.png
   :alt: b clipping
   :srcset: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-84

Run the box clipping algorithm with the defined box geometry

.. GENERATED FROM PYTHON SOURCE LINES 84-96

.. code-block:: default

    extracted = mesh.clip_box(roi, invert=False)

    p = pv.Plotter(shape=(1, 2))
    p.add_mesh(roi, opacity=0.75, color="red")
    p.add_mesh(mesh)
    p.subplot(0, 1)
    p.add_mesh(extracted)
    p.add_mesh(roi, opacity=0.75, color="red")
    p.link_views()
    p.view_isometric()
    p.show()




.. image-sg:: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_004.png
   :alt: b clipping
   :srcset: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-107

Crinkled Clipping
+++++++++++++++++
Crinkled clipping is useful if you don’t want the clip filter to truly clip
cells on the boundary, but want to preserve the input cell structure and to
pass the entire cell on through the boundary.

This option is available for :func:`pyvista.DataSetFilters.clip`,
:func:`pyvista.DataSetFilters.clip_box`, and
:func:`pyvista.DataSetFilters.clip_sruface`, but not available when clipping
by scalar in :func:`pyvista.DataSetFilters.clip_scalar`.

.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: default


    # Input mesh
    mesh = pv.Wavelet()








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Define clipping plane

.. GENERATED FROM PYTHON SOURCE LINES 113-116

.. code-block:: default

    normal = (1, 1, 1)
    plane = pv.Plane(i_size=30, j_size=30, direction=normal)








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Perform a standard clip

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    clipped = mesh.clip(normal=normal)








.. GENERATED FROM PYTHON SOURCE LINES 121-122

Perform a crinkled clip to compare

.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    crinkled = mesh.clip(normal=normal, crinkle=True)








.. GENERATED FROM PYTHON SOURCE LINES 125-126

Plot comparison

.. GENERATED FROM PYTHON SOURCE LINES 126-134

.. code-block:: default

    p = pv.Plotter(shape=(1, 2))
    p.add_mesh(clipped, show_edges=True)
    p.add_mesh(plane.extract_feature_edges(), color='r')
    p.subplot(0, 1)
    p.add_mesh(crinkled, show_edges=True)
    p.add_mesh(plane.extract_feature_edges(), color='r')
    p.link_views()
    p.show()



.. image-sg:: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_005.png
   :alt: b clipping
   :srcset: /tutorial/04_filters/solutions/images/sphx_glr_b_clipping_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.428 seconds)


.. _sphx_glr_download_tutorial_04_filters_solutions_b_clipping.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/04_filters/solutions/b_clipping.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: b_clipping.py <b_clipping.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: b_clipping.ipynb <b_clipping.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
