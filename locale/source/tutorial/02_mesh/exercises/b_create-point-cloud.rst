
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/02_mesh/exercises/b_create-point-cloud.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorial_02_mesh_exercises_b_create-point-cloud.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_02_mesh_exercises_b_create-point-cloud.py:


Create Point Cloud
~~~~~~~~~~~~~~~~~~

Create a :class:`pyvista.PolyData` object from a point cloud of vertices and
scalar arrays for those points.

.. GENERATED FROM PYTHON SOURCE LINES 9-14

.. code-block:: default


    import numpy as np
    import pyvista as pv
    from pyvista import examples


.. GENERATED FROM PYTHON SOURCE LINES 15-20

Point clouds are generally constructed in the :class:`pyvista.PolyData` class
and can easily have scalar/vector data arrays associated with the point
cloud. In this example, we'll work a bit backwards using a point cloud that
that is available from our ``examples`` module. This however is no different
than creating a PyVista mesh with your own NumPy arrays of vertice locations.

.. GENERATED FROM PYTHON SOURCE LINES 20-35

.. code-block:: default



    # Define some helpers - ignore these and use your own data if you like!
    def generate_points(subset=0.02):
        """A helper to make a 3D NumPy array of points (n_points by 3)"""
        dataset = examples.download_lidar()
        ids = np.random.randint(low=0, high=dataset.n_points - 1, size=int(dataset.n_points * subset))
        return dataset.points[ids]


    points = generate_points()
    # Print first 5 rows to prove its a numpy array (n_points by 3)
    # Columns are (X Y Z)
    points[0:5, :]


.. GENERATED FROM PYTHON SOURCE LINES 36-38

Now that you have a NumPy array of points/vertices either from our sample
data or your own project, creating a PyVista mesh of those points:

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    # insert your code here
    point_cloud = ...


.. GENERATED FROM PYTHON SOURCE LINES 43-44

Now, perform a sanity check

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    np.allclose(points, point_cloud.points)


.. GENERATED FROM PYTHON SOURCE LINES 48-51

And now that we have a PyVista mesh, we can plot it. Note that we add an
option to use eye dome lighting - this is a shading technique to improve
depth perception with point clouds (learn more about `EDL <https://docs.pyvista.org/examples/02-plot/edl.html>`_).

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    point_cloud.plot(eye_dome_lighting=True)


.. GENERATED FROM PYTHON SOURCE LINES 54-65

Now what if you have data attributes (scalar/vector arrays) that you'd like
to associate with every node of your mesh? You can easily add NumPy data
arrays that have a length equal to the number of points in the mesh along the
first axis. For example, lets add a few arrays to this new ``point_cloud``
mesh.

Make an array of scalar values with the same length as the points array.
Each element in this array will correspond to points at the same index:

Hint, you can use a component of the ``points`` array or use the ``n_points``
property of the mesh object to make an array of that length.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default



    data = ...


.. GENERATED FROM PYTHON SOURCE LINES 70-71

Add that data to the mesh with the name "elevation"

.. GENERATED FROM PYTHON SOURCE LINES 74-77

And now we can plot the point cloud with that elevation data. PyVista is smart
enough to plot the scalar array you added by default. Note that this time,
we specify to render every point as its own sphere.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: default

    point_cloud.plot(render_points_as_spheres=True)


.. GENERATED FROM PYTHON SOURCE LINES 80-86

That data is kind of boring, right? You can also add data arrays with
more than one scalar value - perhaps a vector with three elements? Let's
make a little function that will compute vectors for every node in the point
cloud and add those vectors to the mesh.

This time, we're going to create a totally new, random point cloud.

.. GENERATED FROM PYTHON SOURCE LINES 86-103

.. code-block:: default


    # Create random XYZ points
    points = np.random.rand(100, 3)
    # Make PolyData
    point_cloud = pv.PolyData(points)


    def compute_vectors(mesh):
        origin = mesh.center
        vectors = mesh.points - origin
        vectors = vectors / np.linalg.norm(vectors, axis=1)[:, None]
        return vectors


    vectors = compute_vectors(point_cloud)
    vectors[0:5, :]


.. GENERATED FROM PYTHON SOURCE LINES 104-105

Add the vector array as point data to the new mesh:

.. GENERATED FROM PYTHON SOURCE LINES 107-109

Now we can make arrows using those vectors using the glyph filter
(see `this example <https://docs.pyvista.org/examples/01-filter/glyphs.html>`_ for more details).

.. GENERATED FROM PYTHON SOURCE LINES 109-124

.. code-block:: default


    arrows = point_cloud.glyph(
        orient='vectors',
        scale=False,
        factor=0.15,
    )

    # Display the arrows
    plotter = pv.Plotter()
    plotter.add_mesh(point_cloud, color='maroon', point_size=10.0, render_points_as_spheres=True)
    plotter.add_mesh(arrows, color='lightblue')
    # plotter.add_point_labels([point_cloud.center,], ['Center',],
    #                          point_color='yellow', point_size=20)
    plotter.show_grid()
    plotter.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_tutorial_02_mesh_exercises_b_create-point-cloud.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/pyvista/pyvista-tutorial/gh-pages?urlpath=lab/tree/notebooks/tutorial/02_mesh/exercises/b_create-point-cloud.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: b_create-point-cloud.py <b_create-point-cloud.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: b_create-point-cloud.ipynb <b_create-point-cloud.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
